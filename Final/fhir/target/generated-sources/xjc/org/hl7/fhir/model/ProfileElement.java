//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:02:37 AM MST 
//


package org.hl7.fhir.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * A Resource Profile - a statement of use of one or more FHIR Resources.  It may include constraints on Resources and Data Types, Terminology Binding Statements and Extension Definitions.
 * 
 * <p>Java class for Profile.Element complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Profile.Element"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="path" type="{http://hl7.org/fhir}string"/&gt;
 *         &lt;element name="representation" type="{http://hl7.org/fhir}PropertyRepresentation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="name" type="{http://hl7.org/fhir}string" minOccurs="0"/&gt;
 *         &lt;element name="slicing" type="{http://hl7.org/fhir}Profile.Slicing" minOccurs="0"/&gt;
 *         &lt;element name="definition" type="{http://hl7.org/fhir}Profile.Definition" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Element", propOrder = {
    "path",
    "representations",
    "name",
    "slicing",
    "definition"
})
public class ProfileElement
    extends BackboneElement
    implements ToString
{

    @XmlElement(required = true)
    protected org.hl7.fhir.model.String path;
    @XmlElement(name = "representation")
    protected List<PropertyRepresentation> representations;
    protected org.hl7.fhir.model.String name;
    protected ProfileSlicing slicing;
    protected ProfileDefinition definition;

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public org.hl7.fhir.model.String getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setPath(org.hl7.fhir.model.String value) {
        this.path = value;
    }

    /**
     * Gets the value of the representations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PropertyRepresentation }
     * 
     * 
     */
    public List<PropertyRepresentation> getRepresentations() {
        if (representations == null) {
            representations = new ArrayList<PropertyRepresentation>();
        }
        return this.representations;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setName(org.hl7.fhir.model.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the slicing property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileSlicing }
     *     
     */
    public ProfileSlicing getSlicing() {
        return slicing;
    }

    /**
     * Sets the value of the slicing property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileSlicing }
     *     
     */
    public void setSlicing(ProfileSlicing value) {
        this.slicing = value;
    }

    /**
     * Gets the value of the definition property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileDefinition }
     *     
     */
    public ProfileDefinition getDefinition() {
        return definition;
    }

    /**
     * Sets the value of the definition property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileDefinition }
     *     
     */
    public void setDefinition(ProfileDefinition value) {
        this.definition = value;
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            org.hl7.fhir.model.String thePath;
            thePath = this.getPath();
            strategy.appendField(locator, this, "path", buffer, thePath);
        }
        {
            List<PropertyRepresentation> theRepresentations;
            theRepresentations = (((this.representations!= null)&&(!this.representations.isEmpty()))?this.getRepresentations():null);
            strategy.appendField(locator, this, "representations", buffer, theRepresentations);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            ProfileSlicing theSlicing;
            theSlicing = this.getSlicing();
            strategy.appendField(locator, this, "slicing", buffer, theSlicing);
        }
        {
            ProfileDefinition theDefinition;
            theDefinition = this.getDefinition();
            strategy.appendField(locator, this, "definition", buffer, theDefinition);
        }
        return buffer;
    }

    public ProfileElement withPath(org.hl7.fhir.model.String value) {
        setPath(value);
        return this;
    }

    public ProfileElement withRepresentations(PropertyRepresentation... values) {
        if (values!= null) {
            for (PropertyRepresentation value: values) {
                getRepresentations().add(value);
            }
        }
        return this;
    }

    public ProfileElement withRepresentations(Collection<PropertyRepresentation> values) {
        if (values!= null) {
            getRepresentations().addAll(values);
        }
        return this;
    }

    public ProfileElement withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public ProfileElement withSlicing(ProfileSlicing value) {
        setSlicing(value);
        return this;
    }

    public ProfileElement withDefinition(ProfileDefinition value) {
        setDefinition(value);
        return this;
    }

    @Override
    public ProfileElement withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileElement withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileElement withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileElement withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileElement withId(java.lang.String value) {
        setId(value);
        return this;
    }

}
