//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The base resource declaration used for all FHIR resource types - adds Narrative and xml:lang
 * 
 * <p>Java class for Resource complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Resource">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="language" type="{http://hl7.org/fhir}code" minOccurs="0"/>
 *         &lt;element name="text" type="{http://hl7.org/fhir}Narrative" minOccurs="0"/>
 *         &lt;element name="contained" type="{http://hl7.org/fhir}Resource.Inline" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Resource", propOrder = {
    "language",
    "text",
    "containeds"
})
@XmlSeeAlso({
    DiagnosticOrder.class,
    ImagingStudy.class,
    AdverseReaction.class,
    Practitioner.class,
    ConceptMap.class,
    Patient.class,
    Alert.class,
    OrderResponse.class,
    Specimen.class,
    RelatedPerson.class,
    Immunization.class,
    DocumentReference.class,
    AllergyIntolerance.class,
    Observation.class,
    Location.class,
    Profile.class,
    Other.class,
    FamilyHistory.class,
    Media.class,
    Conformance.class,
    DeviceObservationReport.class,
    OperationOutcome.class,
    Composition.class,
    Questionnaire.class,
    org.hl7.fhir.model.List.class,
    MedicationStatement.class,
    SecurityEvent.class,
    Encounter.class,
    MedicationAdministration.class,
    MedicationPrescription.class,
    MedicationDispense.class,
    DocumentManifest.class,
    ImmunizationRecommendation.class,
    MessageHeader.class,
    Medication.class,
    ValueSet.class,
    Group.class,
    DiagnosticReport.class,
    Substance.class,
    Procedure.class,
    Organization.class,
    Order.class,
    Query.class,
    Device.class,
    Supply.class,
    CarePlan.class,
    Condition.class,
    Provenance.class
})
@Entity(name = "Resource")
@Table(name = "RESOURCE_")
public class Resource
    extends BackboneElement
    implements Serializable, Equals, HashCode
{

    protected Code language;
    protected Narrative text;
    @XmlElement(name = "contained")
    protected java.util.List<ResourceInline> containeds;

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LANGUAGE__RESOURCE__HJID")
    public Code getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setLanguage(Code value) {
        this.language = value;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link Narrative }
     *     
     */
    @ManyToOne(targetEntity = Narrative.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_RESOURCE__HJID")
    public Narrative getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link Narrative }
     *     
     */
    public void setText(Narrative value) {
        this.text = value;
    }

    /**
     * Gets the value of the containeds property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the containeds property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContaineds().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceInline }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceInline.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTAINEDS_RESOURCE__HJID")
    public java.util.List<ResourceInline> getContaineds() {
        if (containeds == null) {
            containeds = new ArrayList<ResourceInline>();
        }
        return this.containeds;
    }

    /**
     * 
     * 
     */
    public void setContaineds(java.util.List<ResourceInline> containeds) {
        this.containeds = containeds;
    }

    public Resource withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    public Resource withText(Narrative value) {
        setText(value);
        return this;
    }

    public Resource withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    public Resource withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    public Resource withContaineds(java.util.List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public Resource withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Resource withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Resource withModifierExtensions(java.util.List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public Resource withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Resource withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Resource withExtensions(java.util.List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public Resource withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Resource)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Resource that = ((Resource) object);
        {
            Code lhsLanguage;
            lhsLanguage = this.getLanguage();
            Code rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            Narrative lhsText;
            lhsText = this.getText();
            Narrative rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            java.util.List<ResourceInline> lhsContaineds;
            lhsContaineds = (((this.containeds!= null)&&(!this.containeds.isEmpty()))?this.getContaineds():null);
            java.util.List<ResourceInline> rhsContaineds;
            rhsContaineds = (((that.containeds!= null)&&(!that.containeds.isEmpty()))?that.getContaineds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "containeds", lhsContaineds), LocatorUtils.property(thatLocator, "containeds", rhsContaineds), lhsContaineds, rhsContaineds)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            Narrative theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            java.util.List<ResourceInline> theContaineds;
            theContaineds = (((this.containeds!= null)&&(!this.containeds.isEmpty()))?this.getContaineds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "containeds", theContaineds), currentHashCode, theContaineds);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
