//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for DiagnosticOrder complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DiagnosticOrder">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="orderer" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="encounter" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="clinicalNotes" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="specimen" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}DiagnosticOrderStatus" minOccurs="0"/>
 *         &lt;element name="priority" type="{http://hl7.org/fhir}DiagnosticOrderPriority" minOccurs="0"/>
 *         &lt;element name="event" type="{http://hl7.org/fhir}DiagnosticOrder.Event" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="item" type="{http://hl7.org/fhir}DiagnosticOrder.Item" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticOrder", propOrder = {
    "subject",
    "orderer",
    "identifiers",
    "encounter",
    "clinicalNotes",
    "specimens",
    "status",
    "priority",
    "events",
    "items"
})
@XmlRootElement(name = "DiagnosticOrder")
@Entity(name = "DiagnosticOrder")
@Table(name = "DIAGNOSTICORDER")
public class DiagnosticOrder
    extends Resource
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected ResourceReference subject;
    protected ResourceReference orderer;
    @XmlElement(name = "identifier")
    protected List<Identifier> identifiers;
    protected ResourceReference encounter;
    protected org.hl7.fhir.model.String clinicalNotes;
    @XmlElement(name = "specimen")
    protected List<ResourceReference> specimens;
    protected DiagnosticOrderStatus status;
    protected DiagnosticOrderPriority priority;
    @XmlElement(name = "event")
    protected List<DiagnosticOrderEvent> events;
    @XmlElement(name = "item")
    protected List<DiagnosticOrderItem> items;

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DIAGNOSTICORDER_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the orderer property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDERER_DIAGNOSTICORDER_HJID")
    public ResourceReference getOrderer() {
        return orderer;
    }

    /**
     * Sets the value of the orderer property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setOrderer(ResourceReference value) {
        this.orderer = value;
    }

    /**
     * Gets the value of the identifiers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifiers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifiers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_DIAGNOSTICORDER__0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    /**
     * 
     * 
     */
    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * Gets the value of the encounter property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_DIAGNOSTICORDER_HJ_0")
    public ResourceReference getEncounter() {
        return encounter;
    }

    /**
     * Sets the value of the encounter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setEncounter(ResourceReference value) {
        this.encounter = value;
    }

    /**
     * Gets the value of the clinicalNotes property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLINICALNOTES_DIAGNOSTICORDE_0")
    public org.hl7.fhir.model.String getClinicalNotes() {
        return clinicalNotes;
    }

    /**
     * Sets the value of the clinicalNotes property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setClinicalNotes(org.hl7.fhir.model.String value) {
        this.clinicalNotes = value;
    }

    /**
     * Gets the value of the specimens property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specimens property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecimens().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMENS_DIAGNOSTICORDER_HJ_0")
    public List<ResourceReference> getSpecimens() {
        if (specimens == null) {
            specimens = new ArrayList<ResourceReference>();
        }
        return this.specimens;
    }

    /**
     * 
     * 
     */
    public void setSpecimens(List<ResourceReference> specimens) {
        this.specimens = specimens;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link DiagnosticOrderStatus }
     *     
     */
    @ManyToOne(targetEntity = DiagnosticOrderStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DIAGNOSTICORDER_HJID")
    public DiagnosticOrderStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link DiagnosticOrderStatus }
     *     
     */
    public void setStatus(DiagnosticOrderStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link DiagnosticOrderPriority }
     *     
     */
    @ManyToOne(targetEntity = DiagnosticOrderPriority.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIORITY_DIAGNOSTICORDER_HJID")
    public DiagnosticOrderPriority getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link DiagnosticOrderPriority }
     *     
     */
    public void setPriority(DiagnosticOrderPriority value) {
        this.priority = value;
    }

    /**
     * Gets the value of the events property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the events property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEvents().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DiagnosticOrderEvent }
     * 
     * 
     */
    @OneToMany(targetEntity = DiagnosticOrderEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_DIAGNOSTICORDER_HJID")
    public List<DiagnosticOrderEvent> getEvents() {
        if (events == null) {
            events = new ArrayList<DiagnosticOrderEvent>();
        }
        return this.events;
    }

    /**
     * 
     * 
     */
    public void setEvents(List<DiagnosticOrderEvent> events) {
        this.events = events;
    }

    /**
     * Gets the value of the items property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the items property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DiagnosticOrderItem }
     * 
     * 
     */
    @OneToMany(targetEntity = DiagnosticOrderItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ITEMS_DIAGNOSTICORDER_HJID")
    public List<DiagnosticOrderItem> getItems() {
        if (items == null) {
            items = new ArrayList<DiagnosticOrderItem>();
        }
        return this.items;
    }

    /**
     * 
     * 
     */
    public void setItems(List<DiagnosticOrderItem> items) {
        this.items = items;
    }

    public DiagnosticOrder withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DiagnosticOrder withOrderer(ResourceReference value) {
        setOrderer(value);
        return this;
    }

    public DiagnosticOrder withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrder withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public DiagnosticOrder withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public DiagnosticOrder withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public DiagnosticOrder withClinicalNotes(org.hl7.fhir.model.String value) {
        setClinicalNotes(value);
        return this;
    }

    public DiagnosticOrder withSpecimens(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSpecimens().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrder withSpecimens(Collection<ResourceReference> values) {
        if (values!= null) {
            getSpecimens().addAll(values);
        }
        return this;
    }

    public DiagnosticOrder withSpecimens(List<ResourceReference> specimens) {
        setSpecimens(specimens);
        return this;
    }

    public DiagnosticOrder withStatus(DiagnosticOrderStatus value) {
        setStatus(value);
        return this;
    }

    public DiagnosticOrder withPriority(DiagnosticOrderPriority value) {
        setPriority(value);
        return this;
    }

    public DiagnosticOrder withEvents(DiagnosticOrderEvent... values) {
        if (values!= null) {
            for (DiagnosticOrderEvent value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrder withEvents(Collection<DiagnosticOrderEvent> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public DiagnosticOrder withEvents(List<DiagnosticOrderEvent> events) {
        setEvents(events);
        return this;
    }

    public DiagnosticOrder withItems(DiagnosticOrderItem... values) {
        if (values!= null) {
            for (DiagnosticOrderItem value: values) {
                getItems().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrder withItems(Collection<DiagnosticOrderItem> values) {
        if (values!= null) {
            getItems().addAll(values);
        }
        return this;
    }

    public DiagnosticOrder withItems(List<DiagnosticOrderItem> items) {
        setItems(items);
        return this;
    }

    @Override
    public DiagnosticOrder withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DiagnosticOrder withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DiagnosticOrder withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrder withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrder withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DiagnosticOrder withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrder withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrder withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DiagnosticOrder withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrder withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrder withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DiagnosticOrder withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DiagnosticOrder)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DiagnosticOrder that = ((DiagnosticOrder) object);
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrderer;
            lhsOrderer = this.getOrderer();
            ResourceReference rhsOrderer;
            rhsOrderer = that.getOrderer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderer", lhsOrderer), LocatorUtils.property(thatLocator, "orderer", rhsOrderer), lhsOrderer, rhsOrderer)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsClinicalNotes;
            lhsClinicalNotes = this.getClinicalNotes();
            org.hl7.fhir.model.String rhsClinicalNotes;
            rhsClinicalNotes = that.getClinicalNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clinicalNotes", lhsClinicalNotes), LocatorUtils.property(thatLocator, "clinicalNotes", rhsClinicalNotes), lhsClinicalNotes, rhsClinicalNotes)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSpecimens;
            lhsSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            List<ResourceReference> rhsSpecimens;
            rhsSpecimens = (((that.specimens!= null)&&(!that.specimens.isEmpty()))?that.getSpecimens():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimens", lhsSpecimens), LocatorUtils.property(thatLocator, "specimens", rhsSpecimens), lhsSpecimens, rhsSpecimens)) {
                return false;
            }
        }
        {
            DiagnosticOrderStatus lhsStatus;
            lhsStatus = this.getStatus();
            DiagnosticOrderStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            DiagnosticOrderPriority lhsPriority;
            lhsPriority = this.getPriority();
            DiagnosticOrderPriority rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority)) {
                return false;
            }
        }
        {
            List<DiagnosticOrderEvent> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<DiagnosticOrderEvent> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        {
            List<DiagnosticOrderItem> lhsItems;
            lhsItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            List<DiagnosticOrderItem> rhsItems;
            rhsItems = (((that.items!= null)&&(!that.items.isEmpty()))?that.getItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "items", lhsItems), LocatorUtils.property(thatLocator, "items", rhsItems), lhsItems, rhsItems)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theOrderer;
            theOrderer = this.getOrderer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderer", theOrderer), currentHashCode, theOrderer);
        }
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            org.hl7.fhir.model.String theClinicalNotes;
            theClinicalNotes = this.getClinicalNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clinicalNotes", theClinicalNotes), currentHashCode, theClinicalNotes);
        }
        {
            List<ResourceReference> theSpecimens;
            theSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimens", theSpecimens), currentHashCode, theSpecimens);
        }
        {
            DiagnosticOrderStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            DiagnosticOrderPriority thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority);
        }
        {
            List<DiagnosticOrderEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        {
            List<DiagnosticOrderItem> theItems;
            theItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "items", theItems), currentHashCode, theItems);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
