//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A statement of relationships from one set of concepts to one or more other concept systems.
 * 
 * <p>Java class for ConceptMap.Concept complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ConceptMap.Concept">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="system" type="{http://hl7.org/fhir}uri"/>
 *         &lt;element name="code" type="{http://hl7.org/fhir}code" minOccurs="0"/>
 *         &lt;element name="dependsOn" type="{http://hl7.org/fhir}ConceptMap.DependsOn" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="map" type="{http://hl7.org/fhir}ConceptMap.Map" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConceptMap.Concept", propOrder = {
    "system",
    "code",
    "dependsOns",
    "maps"
})
@Entity(name = "ConceptMapConcept")
@Table(name = "CONCEPTMAPCONCEPT")
public class ConceptMapConcept
    extends BackboneElement
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected Uri system;
    protected Code code;
    @XmlElement(name = "dependsOn")
    protected List<ConceptMapDependsOn> dependsOns;
    @XmlElement(name = "map")
    protected List<ConceptMapMap> maps;

    /**
     * Gets the value of the system property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__CONCEPTMAPCONCEPT_HJ_0")
    public Uri getSystem() {
        return system;
    }

    /**
     * Sets the value of the system property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setSystem(Uri value) {
        this.system = value;
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONCEPTMAPCONCEPT_HJID")
    public Code getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setCode(Code value) {
        this.code = value;
    }

    /**
     * Gets the value of the dependsOns property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dependsOns property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDependsOns().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConceptMapDependsOn }
     * 
     * 
     */
    @OneToMany(targetEntity = ConceptMapDependsOn.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEPENDSONS_CONCEPTMAPCONCEPT_0")
    public List<ConceptMapDependsOn> getDependsOns() {
        if (dependsOns == null) {
            dependsOns = new ArrayList<ConceptMapDependsOn>();
        }
        return this.dependsOns;
    }

    /**
     * 
     * 
     */
    public void setDependsOns(List<ConceptMapDependsOn> dependsOns) {
        this.dependsOns = dependsOns;
    }

    /**
     * Gets the value of the maps property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the maps property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMaps().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConceptMapMap }
     * 
     * 
     */
    @OneToMany(targetEntity = ConceptMapMap.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MAPS_CONCEPTMAPCONCEPT_HJID")
    public List<ConceptMapMap> getMaps() {
        if (maps == null) {
            maps = new ArrayList<ConceptMapMap>();
        }
        return this.maps;
    }

    /**
     * 
     * 
     */
    public void setMaps(List<ConceptMapMap> maps) {
        this.maps = maps;
    }

    public ConceptMapConcept withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ConceptMapConcept withCode(Code value) {
        setCode(value);
        return this;
    }

    public ConceptMapConcept withDependsOns(ConceptMapDependsOn... values) {
        if (values!= null) {
            for (ConceptMapDependsOn value: values) {
                getDependsOns().add(value);
            }
        }
        return this;
    }

    public ConceptMapConcept withDependsOns(Collection<ConceptMapDependsOn> values) {
        if (values!= null) {
            getDependsOns().addAll(values);
        }
        return this;
    }

    public ConceptMapConcept withDependsOns(List<ConceptMapDependsOn> dependsOns) {
        setDependsOns(dependsOns);
        return this;
    }

    public ConceptMapConcept withMaps(ConceptMapMap... values) {
        if (values!= null) {
            for (ConceptMapMap value: values) {
                getMaps().add(value);
            }
        }
        return this;
    }

    public ConceptMapConcept withMaps(Collection<ConceptMapMap> values) {
        if (values!= null) {
            getMaps().addAll(values);
        }
        return this;
    }

    public ConceptMapConcept withMaps(List<ConceptMapMap> maps) {
        setMaps(maps);
        return this;
    }

    @Override
    public ConceptMapConcept withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapConcept withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapConcept withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConceptMapConcept withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapConcept withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapConcept withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConceptMapConcept withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConceptMapConcept)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConceptMapConcept that = ((ConceptMapConcept) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            Code lhsCode;
            lhsCode = this.getCode();
            Code rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            List<ConceptMapDependsOn> lhsDependsOns;
            lhsDependsOns = (((this.dependsOns!= null)&&(!this.dependsOns.isEmpty()))?this.getDependsOns():null);
            List<ConceptMapDependsOn> rhsDependsOns;
            rhsDependsOns = (((that.dependsOns!= null)&&(!that.dependsOns.isEmpty()))?that.getDependsOns():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependsOns", lhsDependsOns), LocatorUtils.property(thatLocator, "dependsOns", rhsDependsOns), lhsDependsOns, rhsDependsOns)) {
                return false;
            }
        }
        {
            List<ConceptMapMap> lhsMaps;
            lhsMaps = (((this.maps!= null)&&(!this.maps.isEmpty()))?this.getMaps():null);
            List<ConceptMapMap> rhsMaps;
            rhsMaps = (((that.maps!= null)&&(!that.maps.isEmpty()))?that.getMaps():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maps", lhsMaps), LocatorUtils.property(thatLocator, "maps", rhsMaps), lhsMaps, rhsMaps)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            Code theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            List<ConceptMapDependsOn> theDependsOns;
            theDependsOns = (((this.dependsOns!= null)&&(!this.dependsOns.isEmpty()))?this.getDependsOns():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependsOns", theDependsOns), currentHashCode, theDependsOns);
        }
        {
            List<ConceptMapMap> theMaps;
            theMaps = (((this.maps!= null)&&(!this.maps.isEmpty()))?this.getMaps():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maps", theMaps), currentHashCode, theMaps);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
