//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
 * 
 * <p>Java class for Conformance.Rest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance.Rest">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="mode" type="{http://hl7.org/fhir}RestfulConformanceMode"/>
 *         &lt;element name="documentation" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="security" type="{http://hl7.org/fhir}Conformance.Security" minOccurs="0"/>
 *         &lt;element name="resource" type="{http://hl7.org/fhir}Conformance.Resource" maxOccurs="unbounded"/>
 *         &lt;element name="operation" type="{http://hl7.org/fhir}Conformance.Operation1" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="query" type="{http://hl7.org/fhir}Conformance.Query" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="documentMailbox" type="{http://hl7.org/fhir}uri" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Rest", propOrder = {
    "mode",
    "documentation",
    "security",
    "resources",
    "operations",
    "queries",
    "documentMailboxes"
})
@Entity(name = "ConformanceRest")
@Table(name = "CONFORMANCEREST")
public class ConformanceRest
    extends BackboneElement
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected RestfulConformanceMode mode;
    protected org.hl7.fhir.model.String documentation;
    protected ConformanceSecurity security;
    @XmlElement(name = "resource", required = true)
    protected List<ConformanceResource> resources;
    @XmlElement(name = "operation")
    protected List<ConformanceOperation1> operations;
    @XmlElement(name = "query")
    protected List<ConformanceQuery> queries;
    @XmlElement(name = "documentMailbox")
    protected List<Uri> documentMailboxes;

    /**
     * Gets the value of the mode property.
     * 
     * @return
     *     possible object is
     *     {@link RestfulConformanceMode }
     *     
     */
    @ManyToOne(targetEntity = RestfulConformanceMode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODE__CONFORMANCEREST_HJID")
    public RestfulConformanceMode getMode() {
        return mode;
    }

    /**
     * Sets the value of the mode property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestfulConformanceMode }
     *     
     */
    public void setMode(RestfulConformanceMode value) {
        this.mode = value;
    }

    /**
     * Gets the value of the documentation property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTATION_CONFORMANCERES_0")
    public org.hl7.fhir.model.String getDocumentation() {
        return documentation;
    }

    /**
     * Sets the value of the documentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setDocumentation(org.hl7.fhir.model.String value) {
        this.documentation = value;
    }

    /**
     * Gets the value of the security property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceSecurity }
     *     
     */
    @ManyToOne(targetEntity = ConformanceSecurity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SECURITY__CONFORMANCEREST_HJ_0")
    public ConformanceSecurity getSecurity() {
        return security;
    }

    /**
     * Sets the value of the security property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceSecurity }
     *     
     */
    public void setSecurity(ConformanceSecurity value) {
        this.security = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resources property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResources().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceResource }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceResource.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESOURCES_CONFORMANCEREST_HJ_0")
    public List<ConformanceResource> getResources() {
        if (resources == null) {
            resources = new ArrayList<ConformanceResource>();
        }
        return this.resources;
    }

    /**
     * 
     * 
     */
    public void setResources(List<ConformanceResource> resources) {
        this.resources = resources;
    }

    /**
     * Gets the value of the operations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the operations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOperations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceOperation1 }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceOperation1 .class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPERATIONS_CONFORMANCEREST_H_0")
    public List<ConformanceOperation1> getOperations() {
        if (operations == null) {
            operations = new ArrayList<ConformanceOperation1>();
        }
        return this.operations;
    }

    /**
     * 
     * 
     */
    public void setOperations(List<ConformanceOperation1> operations) {
        this.operations = operations;
    }

    /**
     * Gets the value of the queries property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the queries property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQueries().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceQuery }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceQuery.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUERIES_CONFORMANCEREST_HJID")
    public List<ConformanceQuery> getQueries() {
        if (queries == null) {
            queries = new ArrayList<ConformanceQuery>();
        }
        return this.queries;
    }

    /**
     * 
     * 
     */
    public void setQueries(List<ConformanceQuery> queries) {
        this.queries = queries;
    }

    /**
     * Gets the value of the documentMailboxes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the documentMailboxes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocumentMailboxes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Uri }
     * 
     * 
     */
    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTMAILBOXES_CONFORMANC_0")
    public List<Uri> getDocumentMailboxes() {
        if (documentMailboxes == null) {
            documentMailboxes = new ArrayList<Uri>();
        }
        return this.documentMailboxes;
    }

    /**
     * 
     * 
     */
    public void setDocumentMailboxes(List<Uri> documentMailboxes) {
        this.documentMailboxes = documentMailboxes;
    }

    public ConformanceRest withMode(RestfulConformanceMode value) {
        setMode(value);
        return this;
    }

    public ConformanceRest withDocumentation(org.hl7.fhir.model.String value) {
        setDocumentation(value);
        return this;
    }

    public ConformanceRest withSecurity(ConformanceSecurity value) {
        setSecurity(value);
        return this;
    }

    public ConformanceRest withResources(ConformanceResource... values) {
        if (values!= null) {
            for (ConformanceResource value: values) {
                getResources().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withResources(Collection<ConformanceResource> values) {
        if (values!= null) {
            getResources().addAll(values);
        }
        return this;
    }

    public ConformanceRest withResources(List<ConformanceResource> resources) {
        setResources(resources);
        return this;
    }

    public ConformanceRest withOperations(ConformanceOperation1 ... values) {
        if (values!= null) {
            for (ConformanceOperation1 value: values) {
                getOperations().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withOperations(Collection<ConformanceOperation1> values) {
        if (values!= null) {
            getOperations().addAll(values);
        }
        return this;
    }

    public ConformanceRest withOperations(List<ConformanceOperation1> operations) {
        setOperations(operations);
        return this;
    }

    public ConformanceRest withQueries(ConformanceQuery... values) {
        if (values!= null) {
            for (ConformanceQuery value: values) {
                getQueries().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withQueries(Collection<ConformanceQuery> values) {
        if (values!= null) {
            getQueries().addAll(values);
        }
        return this;
    }

    public ConformanceRest withQueries(List<ConformanceQuery> queries) {
        setQueries(queries);
        return this;
    }

    public ConformanceRest withDocumentMailboxes(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getDocumentMailboxes().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withDocumentMailboxes(Collection<Uri> values) {
        if (values!= null) {
            getDocumentMailboxes().addAll(values);
        }
        return this;
    }

    public ConformanceRest withDocumentMailboxes(List<Uri> documentMailboxes) {
        setDocumentMailboxes(documentMailboxes);
        return this;
    }

    @Override
    public ConformanceRest withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceRest withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceRest withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConformanceRest withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceRest withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceRest withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConformanceRest withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceRest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceRest that = ((ConformanceRest) object);
        {
            RestfulConformanceMode lhsMode;
            lhsMode = this.getMode();
            RestfulConformanceMode rhsMode;
            rhsMode = that.getMode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mode", lhsMode), LocatorUtils.property(thatLocator, "mode", rhsMode), lhsMode, rhsMode)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDocumentation;
            lhsDocumentation = this.getDocumentation();
            org.hl7.fhir.model.String rhsDocumentation;
            rhsDocumentation = that.getDocumentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentation", lhsDocumentation), LocatorUtils.property(thatLocator, "documentation", rhsDocumentation), lhsDocumentation, rhsDocumentation)) {
                return false;
            }
        }
        {
            ConformanceSecurity lhsSecurity;
            lhsSecurity = this.getSecurity();
            ConformanceSecurity rhsSecurity;
            rhsSecurity = that.getSecurity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "security", lhsSecurity), LocatorUtils.property(thatLocator, "security", rhsSecurity), lhsSecurity, rhsSecurity)) {
                return false;
            }
        }
        {
            List<ConformanceResource> lhsResources;
            lhsResources = (((this.resources!= null)&&(!this.resources.isEmpty()))?this.getResources():null);
            List<ConformanceResource> rhsResources;
            rhsResources = (((that.resources!= null)&&(!that.resources.isEmpty()))?that.getResources():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            List<ConformanceOperation1> lhsOperations;
            lhsOperations = (((this.operations!= null)&&(!this.operations.isEmpty()))?this.getOperations():null);
            List<ConformanceOperation1> rhsOperations;
            rhsOperations = (((that.operations!= null)&&(!that.operations.isEmpty()))?that.getOperations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operations", lhsOperations), LocatorUtils.property(thatLocator, "operations", rhsOperations), lhsOperations, rhsOperations)) {
                return false;
            }
        }
        {
            List<ConformanceQuery> lhsQueries;
            lhsQueries = (((this.queries!= null)&&(!this.queries.isEmpty()))?this.getQueries():null);
            List<ConformanceQuery> rhsQueries;
            rhsQueries = (((that.queries!= null)&&(!that.queries.isEmpty()))?that.getQueries():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "queries", lhsQueries), LocatorUtils.property(thatLocator, "queries", rhsQueries), lhsQueries, rhsQueries)) {
                return false;
            }
        }
        {
            List<Uri> lhsDocumentMailboxes;
            lhsDocumentMailboxes = (((this.documentMailboxes!= null)&&(!this.documentMailboxes.isEmpty()))?this.getDocumentMailboxes():null);
            List<Uri> rhsDocumentMailboxes;
            rhsDocumentMailboxes = (((that.documentMailboxes!= null)&&(!that.documentMailboxes.isEmpty()))?that.getDocumentMailboxes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentMailboxes", lhsDocumentMailboxes), LocatorUtils.property(thatLocator, "documentMailboxes", rhsDocumentMailboxes), lhsDocumentMailboxes, rhsDocumentMailboxes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RestfulConformanceMode theMode;
            theMode = this.getMode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mode", theMode), currentHashCode, theMode);
        }
        {
            org.hl7.fhir.model.String theDocumentation;
            theDocumentation = this.getDocumentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentation", theDocumentation), currentHashCode, theDocumentation);
        }
        {
            ConformanceSecurity theSecurity;
            theSecurity = this.getSecurity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "security", theSecurity), currentHashCode, theSecurity);
        }
        {
            List<ConformanceResource> theResources;
            theResources = (((this.resources!= null)&&(!this.resources.isEmpty()))?this.getResources():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            List<ConformanceOperation1> theOperations;
            theOperations = (((this.operations!= null)&&(!this.operations.isEmpty()))?this.getOperations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operations", theOperations), currentHashCode, theOperations);
        }
        {
            List<ConformanceQuery> theQueries;
            theQueries = (((this.queries!= null)&&(!this.queries.isEmpty()))?this.getQueries():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queries", theQueries), currentHashCode, theQueries);
        }
        {
            List<Uri> theDocumentMailboxes;
            theDocumentMailboxes = (((this.documentMailboxes!= null)&&(!this.documentMailboxes.isEmpty()))?this.getDocumentMailboxes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentMailboxes", theDocumentMailboxes), currentHashCode, theDocumentMailboxes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
