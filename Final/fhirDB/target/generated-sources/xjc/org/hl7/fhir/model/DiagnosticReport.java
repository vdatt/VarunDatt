//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for DiagnosticReport complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DiagnosticReport">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}DiagnosticReportStatus"/>
 *         &lt;element name="issued" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="performer" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" minOccurs="0"/>
 *         &lt;element name="requestDetail" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="serviceCategory" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;choice>
 *           &lt;element name="diagnosticDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="diagnosticPeriod" type="{http://hl7.org/fhir}Period"/>
 *         &lt;/choice>
 *         &lt;element name="specimen" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="result" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="imagingStudy" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="image" type="{http://hl7.org/fhir}DiagnosticReport.Image" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="conclusion" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="codedDiagnosis" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="presentedForm" type="{http://hl7.org/fhir}Attachment" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticReport", propOrder = {
    "name",
    "status",
    "issued",
    "subject",
    "performer",
    "identifier",
    "requestDetails",
    "serviceCategory",
    "diagnosticPeriod",
    "diagnosticDateTime",
    "specimens",
    "results",
    "imagingStudies",
    "images",
    "conclusion",
    "codedDiagnosises",
    "presentedForms"
})
@XmlRootElement(name = "DiagnosticReport")
@Entity(name = "DiagnosticReport")
@Table(name = "DIAGNOSTICREPORT")
public class DiagnosticReport
    extends Resource
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected CodeableConcept name;
    @XmlElement(required = true)
    protected DiagnosticReportStatus status;
    @XmlElement(required = true)
    protected DateTime issued;
    @XmlElement(required = true)
    protected ResourceReference subject;
    @XmlElement(required = true)
    protected ResourceReference performer;
    protected Identifier identifier;
    @XmlElement(name = "requestDetail")
    protected List<ResourceReference> requestDetails;
    protected CodeableConcept serviceCategory;
    protected Period diagnosticPeriod;
    protected DateTime diagnosticDateTime;
    @XmlElement(name = "specimen")
    protected List<ResourceReference> specimens;
    @XmlElement(name = "result")
    protected List<ResourceReference> results;
    @XmlElement(name = "imagingStudy")
    protected List<ResourceReference> imagingStudies;
    @XmlElement(name = "image")
    protected List<DiagnosticReportImage> images;
    protected org.hl7.fhir.model.String conclusion;
    @XmlElement(name = "codedDiagnosis")
    protected List<CodeableConcept> codedDiagnosises;
    @XmlElement(name = "presentedForm")
    protected List<Attachment> presentedForms;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__DIAGNOSTICREPORT_HJID")
    public CodeableConcept getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setName(CodeableConcept value) {
        this.name = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link DiagnosticReportStatus }
     *     
     */
    @ManyToOne(targetEntity = DiagnosticReportStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DIAGNOSTICREPORT_HJID")
    public DiagnosticReportStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link DiagnosticReportStatus }
     *     
     */
    public void setStatus(DiagnosticReportStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the issued property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ISSUED_DIAGNOSTICREPORT_HJID")
    public DateTime getIssued() {
        return issued;
    }

    /**
     * Sets the value of the issued property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setIssued(DateTime value) {
        this.issued = value;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DIAGNOSTICREPORT_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the performer property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERFORMER_DIAGNOSTICREPORT_H_0")
    public ResourceReference getPerformer() {
        return performer;
    }

    /**
     * Sets the value of the performer property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPerformer(ResourceReference value) {
        this.performer = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_DIAGNOSTICREPORT__0")
    public Identifier getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setIdentifier(Identifier value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the requestDetails property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestDetails property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestDetails().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REQUESTDETAILS_DIAGNOSTICREP_0")
    public List<ResourceReference> getRequestDetails() {
        if (requestDetails == null) {
            requestDetails = new ArrayList<ResourceReference>();
        }
        return this.requestDetails;
    }

    /**
     * 
     * 
     */
    public void setRequestDetails(List<ResourceReference> requestDetails) {
        this.requestDetails = requestDetails;
    }

    /**
     * Gets the value of the serviceCategory property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICECATEGORY_DIAGNOSTICRE_0")
    public CodeableConcept getServiceCategory() {
        return serviceCategory;
    }

    /**
     * Sets the value of the serviceCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setServiceCategory(CodeableConcept value) {
        this.serviceCategory = value;
    }

    /**
     * Gets the value of the diagnosticPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICPERIOD_DIAGNOSTICR_0")
    public Period getDiagnosticPeriod() {
        return diagnosticPeriod;
    }

    /**
     * Sets the value of the diagnosticPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setDiagnosticPeriod(Period value) {
        this.diagnosticPeriod = value;
    }

    /**
     * Gets the value of the diagnosticDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICDATETIME_DIAGNOSTI_0")
    public DateTime getDiagnosticDateTime() {
        return diagnosticDateTime;
    }

    /**
     * Sets the value of the diagnosticDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDiagnosticDateTime(DateTime value) {
        this.diagnosticDateTime = value;
    }

    /**
     * Gets the value of the specimens property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specimens property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecimens().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMENS_DIAGNOSTICREPORT_H_0")
    public List<ResourceReference> getSpecimens() {
        if (specimens == null) {
            specimens = new ArrayList<ResourceReference>();
        }
        return this.specimens;
    }

    /**
     * 
     * 
     */
    public void setSpecimens(List<ResourceReference> specimens) {
        this.specimens = specimens;
    }

    /**
     * Gets the value of the results property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the results property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResults().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESULTS_DIAGNOSTICREPORT_HJID")
    public List<ResourceReference> getResults() {
        if (results == null) {
            results = new ArrayList<ResourceReference>();
        }
        return this.results;
    }

    /**
     * 
     * 
     */
    public void setResults(List<ResourceReference> results) {
        this.results = results;
    }

    /**
     * Gets the value of the imagingStudies property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the imagingStudies property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getImagingStudies().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMAGINGSTUDIES_DIAGNOSTICREP_0")
    public List<ResourceReference> getImagingStudies() {
        if (imagingStudies == null) {
            imagingStudies = new ArrayList<ResourceReference>();
        }
        return this.imagingStudies;
    }

    /**
     * 
     * 
     */
    public void setImagingStudies(List<ResourceReference> imagingStudies) {
        this.imagingStudies = imagingStudies;
    }

    /**
     * Gets the value of the images property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the images property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getImages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DiagnosticReportImage }
     * 
     * 
     */
    @OneToMany(targetEntity = DiagnosticReportImage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMAGES_DIAGNOSTICREPORT_HJID")
    public List<DiagnosticReportImage> getImages() {
        if (images == null) {
            images = new ArrayList<DiagnosticReportImage>();
        }
        return this.images;
    }

    /**
     * 
     * 
     */
    public void setImages(List<DiagnosticReportImage> images) {
        this.images = images;
    }

    /**
     * Gets the value of the conclusion property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCLUSION_DIAGNOSTICREPORT__0")
    public org.hl7.fhir.model.String getConclusion() {
        return conclusion;
    }

    /**
     * Sets the value of the conclusion property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setConclusion(org.hl7.fhir.model.String value) {
        this.conclusion = value;
    }

    /**
     * Gets the value of the codedDiagnosises property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codedDiagnosises property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodedDiagnosises().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODEDDIAGNOSISES_DIAGNOSTICR_0")
    public List<CodeableConcept> getCodedDiagnosises() {
        if (codedDiagnosises == null) {
            codedDiagnosises = new ArrayList<CodeableConcept>();
        }
        return this.codedDiagnosises;
    }

    /**
     * 
     * 
     */
    public void setCodedDiagnosises(List<CodeableConcept> codedDiagnosises) {
        this.codedDiagnosises = codedDiagnosises;
    }

    /**
     * Gets the value of the presentedForms property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the presentedForms property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPresentedForms().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Attachment }
     * 
     * 
     */
    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRESENTEDFORMS_DIAGNOSTICREP_0")
    public List<Attachment> getPresentedForms() {
        if (presentedForms == null) {
            presentedForms = new ArrayList<Attachment>();
        }
        return this.presentedForms;
    }

    /**
     * 
     * 
     */
    public void setPresentedForms(List<Attachment> presentedForms) {
        this.presentedForms = presentedForms;
    }

    public DiagnosticReport withName(CodeableConcept value) {
        setName(value);
        return this;
    }

    public DiagnosticReport withStatus(DiagnosticReportStatus value) {
        setStatus(value);
        return this;
    }

    public DiagnosticReport withIssued(DateTime value) {
        setIssued(value);
        return this;
    }

    public DiagnosticReport withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DiagnosticReport withPerformer(ResourceReference value) {
        setPerformer(value);
        return this;
    }

    public DiagnosticReport withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public DiagnosticReport withRequestDetails(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getRequestDetails().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withRequestDetails(Collection<ResourceReference> values) {
        if (values!= null) {
            getRequestDetails().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withRequestDetails(List<ResourceReference> requestDetails) {
        setRequestDetails(requestDetails);
        return this;
    }

    public DiagnosticReport withServiceCategory(CodeableConcept value) {
        setServiceCategory(value);
        return this;
    }

    public DiagnosticReport withDiagnosticPeriod(Period value) {
        setDiagnosticPeriod(value);
        return this;
    }

    public DiagnosticReport withDiagnosticDateTime(DateTime value) {
        setDiagnosticDateTime(value);
        return this;
    }

    public DiagnosticReport withSpecimens(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSpecimens().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withSpecimens(Collection<ResourceReference> values) {
        if (values!= null) {
            getSpecimens().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withSpecimens(List<ResourceReference> specimens) {
        setSpecimens(specimens);
        return this;
    }

    public DiagnosticReport withResults(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getResults().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withResults(Collection<ResourceReference> values) {
        if (values!= null) {
            getResults().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withResults(List<ResourceReference> results) {
        setResults(results);
        return this;
    }

    public DiagnosticReport withImagingStudies(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getImagingStudies().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withImagingStudies(Collection<ResourceReference> values) {
        if (values!= null) {
            getImagingStudies().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withImagingStudies(List<ResourceReference> imagingStudies) {
        setImagingStudies(imagingStudies);
        return this;
    }

    public DiagnosticReport withImages(DiagnosticReportImage... values) {
        if (values!= null) {
            for (DiagnosticReportImage value: values) {
                getImages().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withImages(Collection<DiagnosticReportImage> values) {
        if (values!= null) {
            getImages().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withImages(List<DiagnosticReportImage> images) {
        setImages(images);
        return this;
    }

    public DiagnosticReport withConclusion(org.hl7.fhir.model.String value) {
        setConclusion(value);
        return this;
    }

    public DiagnosticReport withCodedDiagnosises(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCodedDiagnosises().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withCodedDiagnosises(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCodedDiagnosises().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withCodedDiagnosises(List<CodeableConcept> codedDiagnosises) {
        setCodedDiagnosises(codedDiagnosises);
        return this;
    }

    public DiagnosticReport withPresentedForms(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPresentedForms().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withPresentedForms(Collection<Attachment> values) {
        if (values!= null) {
            getPresentedForms().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withPresentedForms(List<Attachment> presentedForms) {
        setPresentedForms(presentedForms);
        return this;
    }

    @Override
    public DiagnosticReport withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DiagnosticReport withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DiagnosticReport withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DiagnosticReport withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DiagnosticReport withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DiagnosticReport)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DiagnosticReport that = ((DiagnosticReport) object);
        {
            CodeableConcept lhsName;
            lhsName = this.getName();
            CodeableConcept rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            DiagnosticReportStatus lhsStatus;
            lhsStatus = this.getStatus();
            DiagnosticReportStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            DateTime lhsIssued;
            lhsIssued = this.getIssued();
            DateTime rhsIssued;
            rhsIssued = that.getIssued();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issued", lhsIssued), LocatorUtils.property(thatLocator, "issued", rhsIssued), lhsIssued, rhsIssued)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsPerformer;
            lhsPerformer = this.getPerformer();
            ResourceReference rhsPerformer;
            rhsPerformer = that.getPerformer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "performer", lhsPerformer), LocatorUtils.property(thatLocator, "performer", rhsPerformer), lhsPerformer, rhsPerformer)) {
                return false;
            }
        }
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsRequestDetails;
            lhsRequestDetails = (((this.requestDetails!= null)&&(!this.requestDetails.isEmpty()))?this.getRequestDetails():null);
            List<ResourceReference> rhsRequestDetails;
            rhsRequestDetails = (((that.requestDetails!= null)&&(!that.requestDetails.isEmpty()))?that.getRequestDetails():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestDetails", lhsRequestDetails), LocatorUtils.property(thatLocator, "requestDetails", rhsRequestDetails), lhsRequestDetails, rhsRequestDetails)) {
                return false;
            }
        }
        {
            CodeableConcept lhsServiceCategory;
            lhsServiceCategory = this.getServiceCategory();
            CodeableConcept rhsServiceCategory;
            rhsServiceCategory = that.getServiceCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceCategory", lhsServiceCategory), LocatorUtils.property(thatLocator, "serviceCategory", rhsServiceCategory), lhsServiceCategory, rhsServiceCategory)) {
                return false;
            }
        }
        {
            Period lhsDiagnosticPeriod;
            lhsDiagnosticPeriod = this.getDiagnosticPeriod();
            Period rhsDiagnosticPeriod;
            rhsDiagnosticPeriod = that.getDiagnosticPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticPeriod", lhsDiagnosticPeriod), LocatorUtils.property(thatLocator, "diagnosticPeriod", rhsDiagnosticPeriod), lhsDiagnosticPeriod, rhsDiagnosticPeriod)) {
                return false;
            }
        }
        {
            DateTime lhsDiagnosticDateTime;
            lhsDiagnosticDateTime = this.getDiagnosticDateTime();
            DateTime rhsDiagnosticDateTime;
            rhsDiagnosticDateTime = that.getDiagnosticDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticDateTime", lhsDiagnosticDateTime), LocatorUtils.property(thatLocator, "diagnosticDateTime", rhsDiagnosticDateTime), lhsDiagnosticDateTime, rhsDiagnosticDateTime)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSpecimens;
            lhsSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            List<ResourceReference> rhsSpecimens;
            rhsSpecimens = (((that.specimens!= null)&&(!that.specimens.isEmpty()))?that.getSpecimens():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimens", lhsSpecimens), LocatorUtils.property(thatLocator, "specimens", rhsSpecimens), lhsSpecimens, rhsSpecimens)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsResults;
            lhsResults = (((this.results!= null)&&(!this.results.isEmpty()))?this.getResults():null);
            List<ResourceReference> rhsResults;
            rhsResults = (((that.results!= null)&&(!that.results.isEmpty()))?that.getResults():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "results", lhsResults), LocatorUtils.property(thatLocator, "results", rhsResults), lhsResults, rhsResults)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsImagingStudies;
            lhsImagingStudies = (((this.imagingStudies!= null)&&(!this.imagingStudies.isEmpty()))?this.getImagingStudies():null);
            List<ResourceReference> rhsImagingStudies;
            rhsImagingStudies = (((that.imagingStudies!= null)&&(!that.imagingStudies.isEmpty()))?that.getImagingStudies():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imagingStudies", lhsImagingStudies), LocatorUtils.property(thatLocator, "imagingStudies", rhsImagingStudies), lhsImagingStudies, rhsImagingStudies)) {
                return false;
            }
        }
        {
            List<DiagnosticReportImage> lhsImages;
            lhsImages = (((this.images!= null)&&(!this.images.isEmpty()))?this.getImages():null);
            List<DiagnosticReportImage> rhsImages;
            rhsImages = (((that.images!= null)&&(!that.images.isEmpty()))?that.getImages():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "images", lhsImages), LocatorUtils.property(thatLocator, "images", rhsImages), lhsImages, rhsImages)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsConclusion;
            lhsConclusion = this.getConclusion();
            org.hl7.fhir.model.String rhsConclusion;
            rhsConclusion = that.getConclusion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conclusion", lhsConclusion), LocatorUtils.property(thatLocator, "conclusion", rhsConclusion), lhsConclusion, rhsConclusion)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCodedDiagnosises;
            lhsCodedDiagnosises = (((this.codedDiagnosises!= null)&&(!this.codedDiagnosises.isEmpty()))?this.getCodedDiagnosises():null);
            List<CodeableConcept> rhsCodedDiagnosises;
            rhsCodedDiagnosises = (((that.codedDiagnosises!= null)&&(!that.codedDiagnosises.isEmpty()))?that.getCodedDiagnosises():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codedDiagnosises", lhsCodedDiagnosises), LocatorUtils.property(thatLocator, "codedDiagnosises", rhsCodedDiagnosises), lhsCodedDiagnosises, rhsCodedDiagnosises)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPresentedForms;
            lhsPresentedForms = (((this.presentedForms!= null)&&(!this.presentedForms.isEmpty()))?this.getPresentedForms():null);
            List<Attachment> rhsPresentedForms;
            rhsPresentedForms = (((that.presentedForms!= null)&&(!that.presentedForms.isEmpty()))?that.getPresentedForms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "presentedForms", lhsPresentedForms), LocatorUtils.property(thatLocator, "presentedForms", rhsPresentedForms), lhsPresentedForms, rhsPresentedForms)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            DiagnosticReportStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            DateTime theIssued;
            theIssued = this.getIssued();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issued", theIssued), currentHashCode, theIssued);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference thePerformer;
            thePerformer = this.getPerformer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "performer", thePerformer), currentHashCode, thePerformer);
        }
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            List<ResourceReference> theRequestDetails;
            theRequestDetails = (((this.requestDetails!= null)&&(!this.requestDetails.isEmpty()))?this.getRequestDetails():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestDetails", theRequestDetails), currentHashCode, theRequestDetails);
        }
        {
            CodeableConcept theServiceCategory;
            theServiceCategory = this.getServiceCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceCategory", theServiceCategory), currentHashCode, theServiceCategory);
        }
        {
            Period theDiagnosticPeriod;
            theDiagnosticPeriod = this.getDiagnosticPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticPeriod", theDiagnosticPeriod), currentHashCode, theDiagnosticPeriod);
        }
        {
            DateTime theDiagnosticDateTime;
            theDiagnosticDateTime = this.getDiagnosticDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticDateTime", theDiagnosticDateTime), currentHashCode, theDiagnosticDateTime);
        }
        {
            List<ResourceReference> theSpecimens;
            theSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimens", theSpecimens), currentHashCode, theSpecimens);
        }
        {
            List<ResourceReference> theResults;
            theResults = (((this.results!= null)&&(!this.results.isEmpty()))?this.getResults():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "results", theResults), currentHashCode, theResults);
        }
        {
            List<ResourceReference> theImagingStudies;
            theImagingStudies = (((this.imagingStudies!= null)&&(!this.imagingStudies.isEmpty()))?this.getImagingStudies():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imagingStudies", theImagingStudies), currentHashCode, theImagingStudies);
        }
        {
            List<DiagnosticReportImage> theImages;
            theImages = (((this.images!= null)&&(!this.images.isEmpty()))?this.getImages():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "images", theImages), currentHashCode, theImages);
        }
        {
            org.hl7.fhir.model.String theConclusion;
            theConclusion = this.getConclusion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conclusion", theConclusion), currentHashCode, theConclusion);
        }
        {
            List<CodeableConcept> theCodedDiagnosises;
            theCodedDiagnosises = (((this.codedDiagnosises!= null)&&(!this.codedDiagnosises.isEmpty()))?this.getCodedDiagnosises():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codedDiagnosises", theCodedDiagnosises), currentHashCode, theCodedDiagnosises);
        }
        {
            List<Attachment> thePresentedForms;
            thePresentedForms = (((this.presentedForms!= null)&&(!this.presentedForms.isEmpty()))?this.getPresentedForms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "presentedForms", thePresentedForms), currentHashCode, thePresentedForms);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
