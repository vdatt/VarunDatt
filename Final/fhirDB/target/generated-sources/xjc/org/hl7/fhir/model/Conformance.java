//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Conformance complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="version" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="publisher" type="{http://hl7.org/fhir}string"/>
 *         &lt;element name="telecom" type="{http://hl7.org/fhir}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}ConformanceStatementStatus" minOccurs="0"/>
 *         &lt;element name="experimental" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="date" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;element name="software" type="{http://hl7.org/fhir}Conformance.Software" minOccurs="0"/>
 *         &lt;element name="implementation" type="{http://hl7.org/fhir}Conformance.Implementation" minOccurs="0"/>
 *         &lt;element name="fhirVersion" type="{http://hl7.org/fhir}id"/>
 *         &lt;element name="acceptUnknown" type="{http://hl7.org/fhir}boolean"/>
 *         &lt;element name="format" type="{http://hl7.org/fhir}code" maxOccurs="unbounded"/>
 *         &lt;element name="profile" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="rest" type="{http://hl7.org/fhir}Conformance.Rest" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="messaging" type="{http://hl7.org/fhir}Conformance.Messaging" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="document" type="{http://hl7.org/fhir}Conformance.Document" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance", propOrder = {
    "identifier",
    "version",
    "name",
    "publisher",
    "telecoms",
    "description",
    "status",
    "experimental",
    "date",
    "software",
    "implementation",
    "fhirVersion",
    "acceptUnknown",
    "formats",
    "profiles",
    "rests",
    "messagings",
    "documents"
})
@XmlRootElement(name = "Conformance")
@Entity(name = "Conformance")
@Table(name = "CONFORMANCE")
public class Conformance
    extends Resource
    implements Serializable, Equals, HashCode
{

    protected org.hl7.fhir.model.String identifier;
    protected org.hl7.fhir.model.String version;
    protected org.hl7.fhir.model.String name;
    @XmlElement(required = true)
    protected org.hl7.fhir.model.String publisher;
    @XmlElement(name = "telecom")
    protected List<Contact> telecoms;
    protected org.hl7.fhir.model.String description;
    protected ConformanceStatementStatus status;
    protected Boolean experimental;
    @XmlElement(required = true)
    protected DateTime date;
    protected ConformanceSoftware software;
    protected ConformanceImplementation implementation;
    @XmlElement(required = true)
    protected Id fhirVersion;
    @XmlElement(required = true)
    protected Boolean acceptUnknown;
    @XmlElement(name = "format", required = true)
    protected List<Code> formats;
    @XmlElement(name = "profile")
    protected List<ResourceReference> profiles;
    @XmlElement(name = "rest")
    protected List<ConformanceRest> rests;
    @XmlElement(name = "messaging")
    protected List<ConformanceMessaging> messagings;
    @XmlElement(name = "document")
    protected List<ConformanceDocument> documents;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_CONFORMANCE_HJID")
    public org.hl7.fhir.model.String getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setIdentifier(org.hl7.fhir.model.String value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__CONFORMANCE_HJID")
    public org.hl7.fhir.model.String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setVersion(org.hl7.fhir.model.String value) {
        this.version = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__CONFORMANCE_HJID")
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setName(org.hl7.fhir.model.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the publisher property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PUBLISHER_CONFORMANCE_HJID")
    public org.hl7.fhir.model.String getPublisher() {
        return publisher;
    }

    /**
     * Sets the value of the publisher property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setPublisher(org.hl7.fhir.model.String value) {
        this.publisher = value;
    }

    /**
     * Gets the value of the telecoms property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telecoms property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelecoms().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOMS_CONFORMANCE_HJID")
    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    /**
     * 
     * 
     */
    public void setTelecoms(List<Contact> telecoms) {
        this.telecoms = telecoms;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_CONFORMANCE_HJID")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceStatementStatus }
     *     
     */
    @ManyToOne(targetEntity = ConformanceStatementStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CONFORMANCE_HJID")
    public ConformanceStatementStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceStatementStatus }
     *     
     */
    public void setStatus(ConformanceStatementStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the experimental property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPERIMENTAL_CONFORMANCE_HJID")
    public Boolean getExperimental() {
        return experimental;
    }

    /**
     * Sets the value of the experimental property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setExperimental(Boolean value) {
        this.experimental = value;
    }

    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__CONFORMANCE_HJID")
    public DateTime getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDate(DateTime value) {
        this.date = value;
    }

    /**
     * Gets the value of the software property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceSoftware }
     *     
     */
    @ManyToOne(targetEntity = ConformanceSoftware.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOFTWARE_CONFORMANCE_HJID")
    public ConformanceSoftware getSoftware() {
        return software;
    }

    /**
     * Sets the value of the software property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceSoftware }
     *     
     */
    public void setSoftware(ConformanceSoftware value) {
        this.software = value;
    }

    /**
     * Gets the value of the implementation property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceImplementation }
     *     
     */
    @ManyToOne(targetEntity = ConformanceImplementation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMPLEMENTATION__CONFORMANCE__0")
    public ConformanceImplementation getImplementation() {
        return implementation;
    }

    /**
     * Sets the value of the implementation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceImplementation }
     *     
     */
    public void setImplementation(ConformanceImplementation value) {
        this.implementation = value;
    }

    /**
     * Gets the value of the fhirVersion property.
     * 
     * @return
     *     possible object is
     *     {@link Id }
     *     
     */
    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FHIRVERSION_CONFORMANCE_HJID")
    public Id getFhirVersion() {
        return fhirVersion;
    }

    /**
     * Sets the value of the fhirVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Id }
     *     
     */
    public void setFhirVersion(Id value) {
        this.fhirVersion = value;
    }

    /**
     * Gets the value of the acceptUnknown property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACCEPTUNKNOWN_CONFORMANCE_HJ_0")
    public Boolean getAcceptUnknown() {
        return acceptUnknown;
    }

    /**
     * Sets the value of the acceptUnknown property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAcceptUnknown(Boolean value) {
        this.acceptUnknown = value;
    }

    /**
     * Gets the value of the formats property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the formats property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFormats().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Code }
     * 
     * 
     */
    @OneToMany(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORMATS_CONFORMANCE_HJID")
    public List<Code> getFormats() {
        if (formats == null) {
            formats = new ArrayList<Code>();
        }
        return this.formats;
    }

    /**
     * 
     * 
     */
    public void setFormats(List<Code> formats) {
        this.formats = formats;
    }

    /**
     * Gets the value of the profiles property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the profiles property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProfiles().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROFILES_CONFORMANCE_HJID")
    public List<ResourceReference> getProfiles() {
        if (profiles == null) {
            profiles = new ArrayList<ResourceReference>();
        }
        return this.profiles;
    }

    /**
     * 
     * 
     */
    public void setProfiles(List<ResourceReference> profiles) {
        this.profiles = profiles;
    }

    /**
     * Gets the value of the rests property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the rests property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRests().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceRest }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceRest.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESTS_CONFORMANCE_HJID")
    public List<ConformanceRest> getRests() {
        if (rests == null) {
            rests = new ArrayList<ConformanceRest>();
        }
        return this.rests;
    }

    /**
     * 
     * 
     */
    public void setRests(List<ConformanceRest> rests) {
        this.rests = rests;
    }

    /**
     * Gets the value of the messagings property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the messagings property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMessagings().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceMessaging }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceMessaging.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MESSAGINGS_CONFORMANCE_HJID")
    public List<ConformanceMessaging> getMessagings() {
        if (messagings == null) {
            messagings = new ArrayList<ConformanceMessaging>();
        }
        return this.messagings;
    }

    /**
     * 
     * 
     */
    public void setMessagings(List<ConformanceMessaging> messagings) {
        this.messagings = messagings;
    }

    /**
     * Gets the value of the documents property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the documents property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocuments().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceDocument }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceDocument.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTS_CONFORMANCE_HJID")
    public List<ConformanceDocument> getDocuments() {
        if (documents == null) {
            documents = new ArrayList<ConformanceDocument>();
        }
        return this.documents;
    }

    /**
     * 
     * 
     */
    public void setDocuments(List<ConformanceDocument> documents) {
        this.documents = documents;
    }

    public Conformance withIdentifier(org.hl7.fhir.model.String value) {
        setIdentifier(value);
        return this;
    }

    public Conformance withVersion(org.hl7.fhir.model.String value) {
        setVersion(value);
        return this;
    }

    public Conformance withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public Conformance withPublisher(org.hl7.fhir.model.String value) {
        setPublisher(value);
        return this;
    }

    public Conformance withTelecoms(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecoms().add(value);
            }
        }
        return this;
    }

    public Conformance withTelecoms(Collection<Contact> values) {
        if (values!= null) {
            getTelecoms().addAll(values);
        }
        return this;
    }

    public Conformance withTelecoms(List<Contact> telecoms) {
        setTelecoms(telecoms);
        return this;
    }

    public Conformance withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public Conformance withStatus(ConformanceStatementStatus value) {
        setStatus(value);
        return this;
    }

    public Conformance withExperimental(Boolean value) {
        setExperimental(value);
        return this;
    }

    public Conformance withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public Conformance withSoftware(ConformanceSoftware value) {
        setSoftware(value);
        return this;
    }

    public Conformance withImplementation(ConformanceImplementation value) {
        setImplementation(value);
        return this;
    }

    public Conformance withFhirVersion(Id value) {
        setFhirVersion(value);
        return this;
    }

    public Conformance withAcceptUnknown(Boolean value) {
        setAcceptUnknown(value);
        return this;
    }

    public Conformance withFormats(Code... values) {
        if (values!= null) {
            for (Code value: values) {
                getFormats().add(value);
            }
        }
        return this;
    }

    public Conformance withFormats(Collection<Code> values) {
        if (values!= null) {
            getFormats().addAll(values);
        }
        return this;
    }

    public Conformance withFormats(List<Code> formats) {
        setFormats(formats);
        return this;
    }

    public Conformance withProfiles(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getProfiles().add(value);
            }
        }
        return this;
    }

    public Conformance withProfiles(Collection<ResourceReference> values) {
        if (values!= null) {
            getProfiles().addAll(values);
        }
        return this;
    }

    public Conformance withProfiles(List<ResourceReference> profiles) {
        setProfiles(profiles);
        return this;
    }

    public Conformance withRests(ConformanceRest... values) {
        if (values!= null) {
            for (ConformanceRest value: values) {
                getRests().add(value);
            }
        }
        return this;
    }

    public Conformance withRests(Collection<ConformanceRest> values) {
        if (values!= null) {
            getRests().addAll(values);
        }
        return this;
    }

    public Conformance withRests(List<ConformanceRest> rests) {
        setRests(rests);
        return this;
    }

    public Conformance withMessagings(ConformanceMessaging... values) {
        if (values!= null) {
            for (ConformanceMessaging value: values) {
                getMessagings().add(value);
            }
        }
        return this;
    }

    public Conformance withMessagings(Collection<ConformanceMessaging> values) {
        if (values!= null) {
            getMessagings().addAll(values);
        }
        return this;
    }

    public Conformance withMessagings(List<ConformanceMessaging> messagings) {
        setMessagings(messagings);
        return this;
    }

    public Conformance withDocuments(ConformanceDocument... values) {
        if (values!= null) {
            for (ConformanceDocument value: values) {
                getDocuments().add(value);
            }
        }
        return this;
    }

    public Conformance withDocuments(Collection<ConformanceDocument> values) {
        if (values!= null) {
            getDocuments().addAll(values);
        }
        return this;
    }

    public Conformance withDocuments(List<ConformanceDocument> documents) {
        setDocuments(documents);
        return this;
    }

    @Override
    public Conformance withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Conformance withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Conformance withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public Conformance withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public Conformance withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public Conformance withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Conformance)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Conformance that = ((Conformance) object);
        {
            org.hl7.fhir.model.String lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            org.hl7.fhir.model.String rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.model.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.model.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsPublisher;
            lhsPublisher = this.getPublisher();
            org.hl7.fhir.model.String rhsPublisher;
            rhsPublisher = that.getPublisher();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "publisher", lhsPublisher), LocatorUtils.property(thatLocator, "publisher", rhsPublisher), lhsPublisher, rhsPublisher)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecoms;
            lhsTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            List<Contact> rhsTelecoms;
            rhsTelecoms = (((that.telecoms!= null)&&(!that.telecoms.isEmpty()))?that.getTelecoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecoms", lhsTelecoms), LocatorUtils.property(thatLocator, "telecoms", rhsTelecoms), lhsTelecoms, rhsTelecoms)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            ConformanceStatementStatus lhsStatus;
            lhsStatus = this.getStatus();
            ConformanceStatementStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Boolean lhsExperimental;
            lhsExperimental = this.getExperimental();
            Boolean rhsExperimental;
            rhsExperimental = that.getExperimental();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experimental", lhsExperimental), LocatorUtils.property(thatLocator, "experimental", rhsExperimental), lhsExperimental, rhsExperimental)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ConformanceSoftware lhsSoftware;
            lhsSoftware = this.getSoftware();
            ConformanceSoftware rhsSoftware;
            rhsSoftware = that.getSoftware();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "software", lhsSoftware), LocatorUtils.property(thatLocator, "software", rhsSoftware), lhsSoftware, rhsSoftware)) {
                return false;
            }
        }
        {
            ConformanceImplementation lhsImplementation;
            lhsImplementation = this.getImplementation();
            ConformanceImplementation rhsImplementation;
            rhsImplementation = that.getImplementation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "implementation", lhsImplementation), LocatorUtils.property(thatLocator, "implementation", rhsImplementation), lhsImplementation, rhsImplementation)) {
                return false;
            }
        }
        {
            Id lhsFhirVersion;
            lhsFhirVersion = this.getFhirVersion();
            Id rhsFhirVersion;
            rhsFhirVersion = that.getFhirVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fhirVersion", lhsFhirVersion), LocatorUtils.property(thatLocator, "fhirVersion", rhsFhirVersion), lhsFhirVersion, rhsFhirVersion)) {
                return false;
            }
        }
        {
            Boolean lhsAcceptUnknown;
            lhsAcceptUnknown = this.getAcceptUnknown();
            Boolean rhsAcceptUnknown;
            rhsAcceptUnknown = that.getAcceptUnknown();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "acceptUnknown", lhsAcceptUnknown), LocatorUtils.property(thatLocator, "acceptUnknown", rhsAcceptUnknown), lhsAcceptUnknown, rhsAcceptUnknown)) {
                return false;
            }
        }
        {
            List<Code> lhsFormats;
            lhsFormats = (((this.formats!= null)&&(!this.formats.isEmpty()))?this.getFormats():null);
            List<Code> rhsFormats;
            rhsFormats = (((that.formats!= null)&&(!that.formats.isEmpty()))?that.getFormats():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "formats", lhsFormats), LocatorUtils.property(thatLocator, "formats", rhsFormats), lhsFormats, rhsFormats)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsProfiles;
            lhsProfiles = (((this.profiles!= null)&&(!this.profiles.isEmpty()))?this.getProfiles():null);
            List<ResourceReference> rhsProfiles;
            rhsProfiles = (((that.profiles!= null)&&(!that.profiles.isEmpty()))?that.getProfiles():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profiles", lhsProfiles), LocatorUtils.property(thatLocator, "profiles", rhsProfiles), lhsProfiles, rhsProfiles)) {
                return false;
            }
        }
        {
            List<ConformanceRest> lhsRests;
            lhsRests = (((this.rests!= null)&&(!this.rests.isEmpty()))?this.getRests():null);
            List<ConformanceRest> rhsRests;
            rhsRests = (((that.rests!= null)&&(!that.rests.isEmpty()))?that.getRests():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rests", lhsRests), LocatorUtils.property(thatLocator, "rests", rhsRests), lhsRests, rhsRests)) {
                return false;
            }
        }
        {
            List<ConformanceMessaging> lhsMessagings;
            lhsMessagings = (((this.messagings!= null)&&(!this.messagings.isEmpty()))?this.getMessagings():null);
            List<ConformanceMessaging> rhsMessagings;
            rhsMessagings = (((that.messagings!= null)&&(!that.messagings.isEmpty()))?that.getMessagings():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messagings", lhsMessagings), LocatorUtils.property(thatLocator, "messagings", rhsMessagings), lhsMessagings, rhsMessagings)) {
                return false;
            }
        }
        {
            List<ConformanceDocument> lhsDocuments;
            lhsDocuments = (((this.documents!= null)&&(!this.documents.isEmpty()))?this.getDocuments():null);
            List<ConformanceDocument> rhsDocuments;
            rhsDocuments = (((that.documents!= null)&&(!that.documents.isEmpty()))?that.getDocuments():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documents", lhsDocuments), LocatorUtils.property(thatLocator, "documents", rhsDocuments), lhsDocuments, rhsDocuments)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.model.String theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            org.hl7.fhir.model.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.model.String thePublisher;
            thePublisher = this.getPublisher();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "publisher", thePublisher), currentHashCode, thePublisher);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecoms", theTelecoms), currentHashCode, theTelecoms);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            ConformanceStatementStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Boolean theExperimental;
            theExperimental = this.getExperimental();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experimental", theExperimental), currentHashCode, theExperimental);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ConformanceSoftware theSoftware;
            theSoftware = this.getSoftware();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "software", theSoftware), currentHashCode, theSoftware);
        }
        {
            ConformanceImplementation theImplementation;
            theImplementation = this.getImplementation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "implementation", theImplementation), currentHashCode, theImplementation);
        }
        {
            Id theFhirVersion;
            theFhirVersion = this.getFhirVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fhirVersion", theFhirVersion), currentHashCode, theFhirVersion);
        }
        {
            Boolean theAcceptUnknown;
            theAcceptUnknown = this.getAcceptUnknown();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acceptUnknown", theAcceptUnknown), currentHashCode, theAcceptUnknown);
        }
        {
            List<Code> theFormats;
            theFormats = (((this.formats!= null)&&(!this.formats.isEmpty()))?this.getFormats():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formats", theFormats), currentHashCode, theFormats);
        }
        {
            List<ResourceReference> theProfiles;
            theProfiles = (((this.profiles!= null)&&(!this.profiles.isEmpty()))?this.getProfiles():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profiles", theProfiles), currentHashCode, theProfiles);
        }
        {
            List<ConformanceRest> theRests;
            theRests = (((this.rests!= null)&&(!this.rests.isEmpty()))?this.getRests():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rests", theRests), currentHashCode, theRests);
        }
        {
            List<ConformanceMessaging> theMessagings;
            theMessagings = (((this.messagings!= null)&&(!this.messagings.isEmpty()))?this.getMessagings():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messagings", theMessagings), currentHashCode, theMessagings);
        }
        {
            List<ConformanceDocument> theDocuments;
            theDocuments = (((this.documents!= null)&&(!this.documents.isEmpty()))?this.getDocuments():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documents", theDocuments), currentHashCode, theDocuments);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
