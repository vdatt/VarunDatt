//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for SecurityEvent complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SecurityEvent">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="event" type="{http://hl7.org/fhir}SecurityEvent.Event"/>
 *         &lt;element name="participant" type="{http://hl7.org/fhir}SecurityEvent.Participant" maxOccurs="unbounded"/>
 *         &lt;element name="source" type="{http://hl7.org/fhir}SecurityEvent.Source"/>
 *         &lt;element name="object" type="{http://hl7.org/fhir}SecurityEvent.Object" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SecurityEvent", propOrder = {
    "event",
    "participants",
    "source",
    "objects"
})
@XmlRootElement(name = "SecurityEvent")
@Entity(name = "SecurityEvent")
@Table(name = "SECURITYEVENT")
public class SecurityEvent
    extends Resource
    implements Serializable, Equals, HashCode
{

    @XmlElement(required = true)
    protected SecurityEventEvent event;
    @XmlElement(name = "participant", required = true)
    protected List<SecurityEventParticipant> participants;
    @XmlElement(required = true)
    protected SecurityEventSource source;
    @XmlElement(name = "object")
    protected List<SecurityEventObject> objects;

    /**
     * Gets the value of the event property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityEventEvent }
     *     
     */
    @ManyToOne(targetEntity = SecurityEventEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENT_SECURITYEVENT_HJID")
    public SecurityEventEvent getEvent() {
        return event;
    }

    /**
     * Sets the value of the event property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityEventEvent }
     *     
     */
    public void setEvent(SecurityEventEvent value) {
        this.event = value;
    }

    /**
     * Gets the value of the participants property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the participants property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParticipants().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SecurityEventParticipant }
     * 
     * 
     */
    @OneToMany(targetEntity = SecurityEventParticipant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTICIPANTS_SECURITYEVENT_H_0")
    public List<SecurityEventParticipant> getParticipants() {
        if (participants == null) {
            participants = new ArrayList<SecurityEventParticipant>();
        }
        return this.participants;
    }

    /**
     * 
     * 
     */
    public void setParticipants(List<SecurityEventParticipant> participants) {
        this.participants = participants;
    }

    /**
     * Gets the value of the source property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityEventSource }
     *     
     */
    @ManyToOne(targetEntity = SecurityEventSource.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCE__SECURITYEVENT_HJID")
    public SecurityEventSource getSource() {
        return source;
    }

    /**
     * Sets the value of the source property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityEventSource }
     *     
     */
    public void setSource(SecurityEventSource value) {
        this.source = value;
    }

    /**
     * Gets the value of the objects property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the objects property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getObjects().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SecurityEventObject }
     * 
     * 
     */
    @OneToMany(targetEntity = SecurityEventObject.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OBJECTS_SECURITYEVENT_HJID")
    public List<SecurityEventObject> getObjects() {
        if (objects == null) {
            objects = new ArrayList<SecurityEventObject>();
        }
        return this.objects;
    }

    /**
     * 
     * 
     */
    public void setObjects(List<SecurityEventObject> objects) {
        this.objects = objects;
    }

    public SecurityEvent withEvent(SecurityEventEvent value) {
        setEvent(value);
        return this;
    }

    public SecurityEvent withParticipants(SecurityEventParticipant... values) {
        if (values!= null) {
            for (SecurityEventParticipant value: values) {
                getParticipants().add(value);
            }
        }
        return this;
    }

    public SecurityEvent withParticipants(Collection<SecurityEventParticipant> values) {
        if (values!= null) {
            getParticipants().addAll(values);
        }
        return this;
    }

    public SecurityEvent withParticipants(List<SecurityEventParticipant> participants) {
        setParticipants(participants);
        return this;
    }

    public SecurityEvent withSource(SecurityEventSource value) {
        setSource(value);
        return this;
    }

    public SecurityEvent withObjects(SecurityEventObject... values) {
        if (values!= null) {
            for (SecurityEventObject value: values) {
                getObjects().add(value);
            }
        }
        return this;
    }

    public SecurityEvent withObjects(Collection<SecurityEventObject> values) {
        if (values!= null) {
            getObjects().addAll(values);
        }
        return this;
    }

    public SecurityEvent withObjects(List<SecurityEventObject> objects) {
        setObjects(objects);
        return this;
    }

    @Override
    public SecurityEvent withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SecurityEvent withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public SecurityEvent withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public SecurityEvent withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public SecurityEvent withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public SecurityEvent withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SecurityEvent withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SecurityEvent withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SecurityEvent withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SecurityEvent withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SecurityEvent withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SecurityEvent withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SecurityEvent)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SecurityEvent that = ((SecurityEvent) object);
        {
            SecurityEventEvent lhsEvent;
            lhsEvent = this.getEvent();
            SecurityEventEvent rhsEvent;
            rhsEvent = that.getEvent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "event", lhsEvent), LocatorUtils.property(thatLocator, "event", rhsEvent), lhsEvent, rhsEvent)) {
                return false;
            }
        }
        {
            List<SecurityEventParticipant> lhsParticipants;
            lhsParticipants = (((this.participants!= null)&&(!this.participants.isEmpty()))?this.getParticipants():null);
            List<SecurityEventParticipant> rhsParticipants;
            rhsParticipants = (((that.participants!= null)&&(!that.participants.isEmpty()))?that.getParticipants():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "participants", lhsParticipants), LocatorUtils.property(thatLocator, "participants", rhsParticipants), lhsParticipants, rhsParticipants)) {
                return false;
            }
        }
        {
            SecurityEventSource lhsSource;
            lhsSource = this.getSource();
            SecurityEventSource rhsSource;
            rhsSource = that.getSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "source", lhsSource), LocatorUtils.property(thatLocator, "source", rhsSource), lhsSource, rhsSource)) {
                return false;
            }
        }
        {
            List<SecurityEventObject> lhsObjects;
            lhsObjects = (((this.objects!= null)&&(!this.objects.isEmpty()))?this.getObjects():null);
            List<SecurityEventObject> rhsObjects;
            rhsObjects = (((that.objects!= null)&&(!that.objects.isEmpty()))?that.getObjects():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "objects", lhsObjects), LocatorUtils.property(thatLocator, "objects", rhsObjects), lhsObjects, rhsObjects)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            SecurityEventEvent theEvent;
            theEvent = this.getEvent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "event", theEvent), currentHashCode, theEvent);
        }
        {
            List<SecurityEventParticipant> theParticipants;
            theParticipants = (((this.participants!= null)&&(!this.participants.isEmpty()))?this.getParticipants():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "participants", theParticipants), currentHashCode, theParticipants);
        }
        {
            SecurityEventSource theSource;
            theSource = this.getSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "source", theSource), currentHashCode, theSource);
        }
        {
            List<SecurityEventObject> theObjects;
            theObjects = (((this.objects!= null)&&(!this.objects.isEmpty()))?this.getObjects():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "objects", theObjects), currentHashCode, theObjects);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
