//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for MedicationStatement complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MedicationStatement">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="patient" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="wasNotGiven" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="reasonNotGiven" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="whenGiven" type="{http://hl7.org/fhir}Period" minOccurs="0"/>
 *         &lt;element name="medication" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="device" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="dosage" type="{http://hl7.org/fhir}MedicationStatement.Dosage" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationStatement", propOrder = {
    "identifiers",
    "patient",
    "wasNotGiven",
    "reasonNotGivens",
    "whenGiven",
    "medication",
    "devices",
    "dosages"
})
@XmlRootElement(name = "MedicationStatement")
@Entity(name = "MedicationStatement")
@Table(name = "MEDICATIONSTATEMENT")
public class MedicationStatement
    extends Resource
    implements Serializable, Equals, HashCode
{

    @XmlElement(name = "identifier")
    protected List<Identifier> identifiers;
    protected ResourceReference patient;
    protected Boolean wasNotGiven;
    @XmlElement(name = "reasonNotGiven")
    protected List<CodeableConcept> reasonNotGivens;
    protected Period whenGiven;
    protected ResourceReference medication;
    @XmlElement(name = "device")
    protected List<ResourceReference> devices;
    @XmlElement(name = "dosage")
    protected List<MedicationStatementDosage> dosages;

    /**
     * Gets the value of the identifiers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifiers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifiers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_MEDICATIONSTATEM_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    /**
     * 
     * 
     */
    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * Gets the value of the patient property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONSTATEMENT__0")
    public ResourceReference getPatient() {
        return patient;
    }

    /**
     * Sets the value of the patient property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPatient(ResourceReference value) {
        this.patient = value;
    }

    /**
     * Gets the value of the wasNotGiven property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WASNOTGIVEN_MEDICATIONSTATEM_0")
    public Boolean getWasNotGiven() {
        return wasNotGiven;
    }

    /**
     * Sets the value of the wasNotGiven property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setWasNotGiven(Boolean value) {
        this.wasNotGiven = value;
    }

    /**
     * Gets the value of the reasonNotGivens property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reasonNotGivens property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReasonNotGivens().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONNOTGIVENS_MEDICATIONST_0")
    public List<CodeableConcept> getReasonNotGivens() {
        if (reasonNotGivens == null) {
            reasonNotGivens = new ArrayList<CodeableConcept>();
        }
        return this.reasonNotGivens;
    }

    /**
     * 
     * 
     */
    public void setReasonNotGivens(List<CodeableConcept> reasonNotGivens) {
        this.reasonNotGivens = reasonNotGivens;
    }

    /**
     * Gets the value of the whenGiven property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENGIVEN_MEDICATIONSTATEMEN_0")
    public Period getWhenGiven() {
        return whenGiven;
    }

    /**
     * Sets the value of the whenGiven property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setWhenGiven(Period value) {
        this.whenGiven = value;
    }

    /**
     * Gets the value of the medication property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONSTATEME_0")
    public ResourceReference getMedication() {
        return medication;
    }

    /**
     * Sets the value of the medication property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setMedication(ResourceReference value) {
        this.medication = value;
    }

    /**
     * Gets the value of the devices property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the devices property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDevices().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEVICES_MEDICATIONSTATEMENT__0")
    public List<ResourceReference> getDevices() {
        if (devices == null) {
            devices = new ArrayList<ResourceReference>();
        }
        return this.devices;
    }

    /**
     * 
     * 
     */
    public void setDevices(List<ResourceReference> devices) {
        this.devices = devices;
    }

    /**
     * Gets the value of the dosages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dosages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDosages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MedicationStatementDosage }
     * 
     * 
     */
    @OneToMany(targetEntity = MedicationStatementDosage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSAGES_MEDICATIONSTATEMENT__0")
    public List<MedicationStatementDosage> getDosages() {
        if (dosages == null) {
            dosages = new ArrayList<MedicationStatementDosage>();
        }
        return this.dosages;
    }

    /**
     * 
     * 
     */
    public void setDosages(List<MedicationStatementDosage> dosages) {
        this.dosages = dosages;
    }

    public MedicationStatement withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public MedicationStatement withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public MedicationStatement withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public MedicationStatement withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationStatement withWasNotGiven(Boolean value) {
        setWasNotGiven(value);
        return this;
    }

    public MedicationStatement withReasonNotGivens(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getReasonNotGivens().add(value);
            }
        }
        return this;
    }

    public MedicationStatement withReasonNotGivens(Collection<CodeableConcept> values) {
        if (values!= null) {
            getReasonNotGivens().addAll(values);
        }
        return this;
    }

    public MedicationStatement withReasonNotGivens(List<CodeableConcept> reasonNotGivens) {
        setReasonNotGivens(reasonNotGivens);
        return this;
    }

    public MedicationStatement withWhenGiven(Period value) {
        setWhenGiven(value);
        return this;
    }

    public MedicationStatement withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationStatement withDevices(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getDevices().add(value);
            }
        }
        return this;
    }

    public MedicationStatement withDevices(Collection<ResourceReference> values) {
        if (values!= null) {
            getDevices().addAll(values);
        }
        return this;
    }

    public MedicationStatement withDevices(List<ResourceReference> devices) {
        setDevices(devices);
        return this;
    }

    public MedicationStatement withDosages(MedicationStatementDosage... values) {
        if (values!= null) {
            for (MedicationStatementDosage value: values) {
                getDosages().add(value);
            }
        }
        return this;
    }

    public MedicationStatement withDosages(Collection<MedicationStatementDosage> values) {
        if (values!= null) {
            getDosages().addAll(values);
        }
        return this;
    }

    public MedicationStatement withDosages(List<MedicationStatementDosage> dosages) {
        setDosages(dosages);
        return this;
    }

    @Override
    public MedicationStatement withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationStatement withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationStatement withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationStatement withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationStatement withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public MedicationStatement withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationStatement withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationStatement withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationStatement withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationStatement withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationStatement withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationStatement withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationStatement)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationStatement that = ((MedicationStatement) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            Boolean lhsWasNotGiven;
            lhsWasNotGiven = this.getWasNotGiven();
            Boolean rhsWasNotGiven;
            rhsWasNotGiven = that.getWasNotGiven();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wasNotGiven", lhsWasNotGiven), LocatorUtils.property(thatLocator, "wasNotGiven", rhsWasNotGiven), lhsWasNotGiven, rhsWasNotGiven)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsReasonNotGivens;
            lhsReasonNotGivens = (((this.reasonNotGivens!= null)&&(!this.reasonNotGivens.isEmpty()))?this.getReasonNotGivens():null);
            List<CodeableConcept> rhsReasonNotGivens;
            rhsReasonNotGivens = (((that.reasonNotGivens!= null)&&(!that.reasonNotGivens.isEmpty()))?that.getReasonNotGivens():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonNotGivens", lhsReasonNotGivens), LocatorUtils.property(thatLocator, "reasonNotGivens", rhsReasonNotGivens), lhsReasonNotGivens, rhsReasonNotGivens)) {
                return false;
            }
        }
        {
            Period lhsWhenGiven;
            lhsWhenGiven = this.getWhenGiven();
            Period rhsWhenGiven;
            rhsWhenGiven = that.getWhenGiven();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenGiven", lhsWhenGiven), LocatorUtils.property(thatLocator, "whenGiven", rhsWhenGiven), lhsWhenGiven, rhsWhenGiven)) {
                return false;
            }
        }
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsDevices;
            lhsDevices = (((this.devices!= null)&&(!this.devices.isEmpty()))?this.getDevices():null);
            List<ResourceReference> rhsDevices;
            rhsDevices = (((that.devices!= null)&&(!that.devices.isEmpty()))?that.getDevices():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "devices", lhsDevices), LocatorUtils.property(thatLocator, "devices", rhsDevices), lhsDevices, rhsDevices)) {
                return false;
            }
        }
        {
            List<MedicationStatementDosage> lhsDosages;
            lhsDosages = (((this.dosages!= null)&&(!this.dosages.isEmpty()))?this.getDosages():null);
            List<MedicationStatementDosage> rhsDosages;
            rhsDosages = (((that.dosages!= null)&&(!that.dosages.isEmpty()))?that.getDosages():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dosages", lhsDosages), LocatorUtils.property(thatLocator, "dosages", rhsDosages), lhsDosages, rhsDosages)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            Boolean theWasNotGiven;
            theWasNotGiven = this.getWasNotGiven();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wasNotGiven", theWasNotGiven), currentHashCode, theWasNotGiven);
        }
        {
            List<CodeableConcept> theReasonNotGivens;
            theReasonNotGivens = (((this.reasonNotGivens!= null)&&(!this.reasonNotGivens.isEmpty()))?this.getReasonNotGivens():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonNotGivens", theReasonNotGivens), currentHashCode, theReasonNotGivens);
        }
        {
            Period theWhenGiven;
            theWhenGiven = this.getWhenGiven();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenGiven", theWhenGiven), currentHashCode, theWhenGiven);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            List<ResourceReference> theDevices;
            theDevices = (((this.devices!= null)&&(!this.devices.isEmpty()))?this.getDevices():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "devices", theDevices), currentHashCode, theDevices);
        }
        {
            List<MedicationStatementDosage> theDosages;
            theDosages = (((this.dosages!= null)&&(!this.dosages.isEmpty()))?this.getDosages():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dosages", theDosages), currentHashCode, theDosages);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
