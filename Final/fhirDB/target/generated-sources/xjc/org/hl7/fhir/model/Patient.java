//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Patient complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Patient">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}HumanName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="telecom" type="{http://hl7.org/fhir}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="gender" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="birthDate" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="deceasedBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="deceasedDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;/choice>
 *         &lt;element name="address" type="{http://hl7.org/fhir}Address" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="maritalStatus" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="multipleBirthBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="multipleBirthInteger" type="{http://hl7.org/fhir}integer"/>
 *         &lt;/choice>
 *         &lt;element name="photo" type="{http://hl7.org/fhir}Attachment" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="contact" type="{http://hl7.org/fhir}Patient.Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="animal" type="{http://hl7.org/fhir}Patient.Animal" minOccurs="0"/>
 *         &lt;element name="communication" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="careProvider" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="managingOrganization" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="link" type="{http://hl7.org/fhir}Patient.Link" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="active" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Patient", propOrder = {
    "identifiers",
    "names",
    "telecoms",
    "gender",
    "birthDate",
    "deceasedDateTime",
    "deceasedBoolean",
    "addresses",
    "maritalStatus",
    "multipleBirthInteger",
    "multipleBirthBoolean",
    "photos",
    "contacts",
    "animal",
    "communications",
    "careProviders",
    "managingOrganization",
    "links",
    "active"
})
@XmlRootElement(name = "Patient")
@Entity(name = "Patient")
@Table(name = "PATIENT")
public class Patient
    extends Resource
    implements Serializable, Equals, HashCode
{

    @XmlElement(name = "identifier")
    protected List<Identifier> identifiers;
    @XmlElement(name = "name")
    protected List<HumanName> names;
    @XmlElement(name = "telecom")
    protected List<Contact> telecoms;
    protected CodeableConcept gender;
    protected DateTime birthDate;
    protected DateTime deceasedDateTime;
    protected Boolean deceasedBoolean;
    @XmlElement(name = "address")
    protected List<Address> addresses;
    protected CodeableConcept maritalStatus;
    protected Integer multipleBirthInteger;
    protected Boolean multipleBirthBoolean;
    @XmlElement(name = "photo")
    protected List<Attachment> photos;
    @XmlElement(name = "contact")
    protected List<PatientContact> contacts;
    protected PatientAnimal animal;
    @XmlElement(name = "communication")
    protected List<CodeableConcept> communications;
    @XmlElement(name = "careProvider")
    protected List<ResourceReference> careProviders;
    protected ResourceReference managingOrganization;
    @XmlElement(name = "link")
    protected List<PatientLink> links;
    protected Boolean active;

    /**
     * Gets the value of the identifiers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifiers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifiers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_PATIENT_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    /**
     * 
     * 
     */
    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * Gets the value of the names property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the names property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNames().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link HumanName }
     * 
     * 
     */
    @OneToMany(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAMES__PATIENT_HJID")
    public List<HumanName> getNames() {
        if (names == null) {
            names = new ArrayList<HumanName>();
        }
        return this.names;
    }

    /**
     * 
     * 
     */
    public void setNames(List<HumanName> names) {
        this.names = names;
    }

    /**
     * Gets the value of the telecoms property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telecoms property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelecoms().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOMS_PATIENT_HJID")
    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    /**
     * 
     * 
     */
    public void setTelecoms(List<Contact> telecoms) {
        this.telecoms = telecoms;
    }

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GENDER_PATIENT_HJID")
    public CodeableConcept getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setGender(CodeableConcept value) {
        this.gender = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BIRTHDATE_PATIENT_HJID")
    public DateTime getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setBirthDate(DateTime value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the deceasedDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DECEASEDDATETIME_PATIENT_HJID")
    public DateTime getDeceasedDateTime() {
        return deceasedDateTime;
    }

    /**
     * Sets the value of the deceasedDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDeceasedDateTime(DateTime value) {
        this.deceasedDateTime = value;
    }

    /**
     * Gets the value of the deceasedBoolean property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DECEASEDBOOLEAN_PATIENT_HJID")
    public Boolean getDeceasedBoolean() {
        return deceasedBoolean;
    }

    /**
     * Sets the value of the deceasedBoolean property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDeceasedBoolean(Boolean value) {
        this.deceasedBoolean = value;
    }

    /**
     * Gets the value of the addresses property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addresses property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddresses().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Address }
     * 
     * 
     */
    @OneToMany(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESSES_PATIENT_HJID")
    public List<Address> getAddresses() {
        if (addresses == null) {
            addresses = new ArrayList<Address>();
        }
        return this.addresses;
    }

    /**
     * 
     * 
     */
    public void setAddresses(List<Address> addresses) {
        this.addresses = addresses;
    }

    /**
     * Gets the value of the maritalStatus property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MARITALSTATUS_PATIENT_HJID")
    public CodeableConcept getMaritalStatus() {
        return maritalStatus;
    }

    /**
     * Sets the value of the maritalStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setMaritalStatus(CodeableConcept value) {
        this.maritalStatus = value;
    }

    /**
     * Gets the value of the multipleBirthInteger property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MULTIPLEBIRTHINTEGER_PATIENT_0")
    public Integer getMultipleBirthInteger() {
        return multipleBirthInteger;
    }

    /**
     * Sets the value of the multipleBirthInteger property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMultipleBirthInteger(Integer value) {
        this.multipleBirthInteger = value;
    }

    /**
     * Gets the value of the multipleBirthBoolean property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MULTIPLEBIRTHBOOLEAN_PATIENT_0")
    public Boolean getMultipleBirthBoolean() {
        return multipleBirthBoolean;
    }

    /**
     * Sets the value of the multipleBirthBoolean property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMultipleBirthBoolean(Boolean value) {
        this.multipleBirthBoolean = value;
    }

    /**
     * Gets the value of the photos property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the photos property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhotos().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Attachment }
     * 
     * 
     */
    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PHOTOS_PATIENT_HJID")
    public List<Attachment> getPhotos() {
        if (photos == null) {
            photos = new ArrayList<Attachment>();
        }
        return this.photos;
    }

    /**
     * 
     * 
     */
    public void setPhotos(List<Attachment> photos) {
        this.photos = photos;
    }

    /**
     * Gets the value of the contacts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contacts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContacts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PatientContact }
     * 
     * 
     */
    @OneToMany(targetEntity = PatientContact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTACTS_PATIENT_HJID")
    public List<PatientContact> getContacts() {
        if (contacts == null) {
            contacts = new ArrayList<PatientContact>();
        }
        return this.contacts;
    }

    /**
     * 
     * 
     */
    public void setContacts(List<PatientContact> contacts) {
        this.contacts = contacts;
    }

    /**
     * Gets the value of the animal property.
     * 
     * @return
     *     possible object is
     *     {@link PatientAnimal }
     *     
     */
    @ManyToOne(targetEntity = PatientAnimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANIMAL_PATIENT_HJID")
    public PatientAnimal getAnimal() {
        return animal;
    }

    /**
     * Sets the value of the animal property.
     * 
     * @param value
     *     allowed object is
     *     {@link PatientAnimal }
     *     
     */
    public void setAnimal(PatientAnimal value) {
        this.animal = value;
    }

    /**
     * Gets the value of the communications property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the communications property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCommunications().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMUNICATIONS_PATIENT_HJID")
    public List<CodeableConcept> getCommunications() {
        if (communications == null) {
            communications = new ArrayList<CodeableConcept>();
        }
        return this.communications;
    }

    /**
     * 
     * 
     */
    public void setCommunications(List<CodeableConcept> communications) {
        this.communications = communications;
    }

    /**
     * Gets the value of the careProviders property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the careProviders property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCareProviders().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CAREPROVIDERS_PATIENT_HJID")
    public List<ResourceReference> getCareProviders() {
        if (careProviders == null) {
            careProviders = new ArrayList<ResourceReference>();
        }
        return this.careProviders;
    }

    /**
     * 
     * 
     */
    public void setCareProviders(List<ResourceReference> careProviders) {
        this.careProviders = careProviders;
    }

    /**
     * Gets the value of the managingOrganization property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MANAGINGORGANIZATION_PATIENT_0")
    public ResourceReference getManagingOrganization() {
        return managingOrganization;
    }

    /**
     * Sets the value of the managingOrganization property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setManagingOrganization(ResourceReference value) {
        this.managingOrganization = value;
    }

    /**
     * Gets the value of the links property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the links property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLinks().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PatientLink }
     * 
     * 
     */
    @OneToMany(targetEntity = PatientLink.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LINKS_PATIENT_HJID")
    public List<PatientLink> getLinks() {
        if (links == null) {
            links = new ArrayList<PatientLink>();
        }
        return this.links;
    }

    /**
     * 
     * 
     */
    public void setLinks(List<PatientLink> links) {
        this.links = links;
    }

    /**
     * Gets the value of the active property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTIVE_PATIENT_HJID")
    public Boolean getActive() {
        return active;
    }

    /**
     * Sets the value of the active property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setActive(Boolean value) {
        this.active = value;
    }

    public Patient withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public Patient withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public Patient withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public Patient withNames(HumanName... values) {
        if (values!= null) {
            for (HumanName value: values) {
                getNames().add(value);
            }
        }
        return this;
    }

    public Patient withNames(Collection<HumanName> values) {
        if (values!= null) {
            getNames().addAll(values);
        }
        return this;
    }

    public Patient withNames(List<HumanName> names) {
        setNames(names);
        return this;
    }

    public Patient withTelecoms(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecoms().add(value);
            }
        }
        return this;
    }

    public Patient withTelecoms(Collection<Contact> values) {
        if (values!= null) {
            getTelecoms().addAll(values);
        }
        return this;
    }

    public Patient withTelecoms(List<Contact> telecoms) {
        setTelecoms(telecoms);
        return this;
    }

    public Patient withGender(CodeableConcept value) {
        setGender(value);
        return this;
    }

    public Patient withBirthDate(DateTime value) {
        setBirthDate(value);
        return this;
    }

    public Patient withDeceasedDateTime(DateTime value) {
        setDeceasedDateTime(value);
        return this;
    }

    public Patient withDeceasedBoolean(Boolean value) {
        setDeceasedBoolean(value);
        return this;
    }

    public Patient withAddresses(Address... values) {
        if (values!= null) {
            for (Address value: values) {
                getAddresses().add(value);
            }
        }
        return this;
    }

    public Patient withAddresses(Collection<Address> values) {
        if (values!= null) {
            getAddresses().addAll(values);
        }
        return this;
    }

    public Patient withAddresses(List<Address> addresses) {
        setAddresses(addresses);
        return this;
    }

    public Patient withMaritalStatus(CodeableConcept value) {
        setMaritalStatus(value);
        return this;
    }

    public Patient withMultipleBirthInteger(Integer value) {
        setMultipleBirthInteger(value);
        return this;
    }

    public Patient withMultipleBirthBoolean(Boolean value) {
        setMultipleBirthBoolean(value);
        return this;
    }

    public Patient withPhotos(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPhotos().add(value);
            }
        }
        return this;
    }

    public Patient withPhotos(Collection<Attachment> values) {
        if (values!= null) {
            getPhotos().addAll(values);
        }
        return this;
    }

    public Patient withPhotos(List<Attachment> photos) {
        setPhotos(photos);
        return this;
    }

    public Patient withContacts(PatientContact... values) {
        if (values!= null) {
            for (PatientContact value: values) {
                getContacts().add(value);
            }
        }
        return this;
    }

    public Patient withContacts(Collection<PatientContact> values) {
        if (values!= null) {
            getContacts().addAll(values);
        }
        return this;
    }

    public Patient withContacts(List<PatientContact> contacts) {
        setContacts(contacts);
        return this;
    }

    public Patient withAnimal(PatientAnimal value) {
        setAnimal(value);
        return this;
    }

    public Patient withCommunications(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCommunications().add(value);
            }
        }
        return this;
    }

    public Patient withCommunications(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCommunications().addAll(values);
        }
        return this;
    }

    public Patient withCommunications(List<CodeableConcept> communications) {
        setCommunications(communications);
        return this;
    }

    public Patient withCareProviders(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getCareProviders().add(value);
            }
        }
        return this;
    }

    public Patient withCareProviders(Collection<ResourceReference> values) {
        if (values!= null) {
            getCareProviders().addAll(values);
        }
        return this;
    }

    public Patient withCareProviders(List<ResourceReference> careProviders) {
        setCareProviders(careProviders);
        return this;
    }

    public Patient withManagingOrganization(ResourceReference value) {
        setManagingOrganization(value);
        return this;
    }

    public Patient withLinks(PatientLink... values) {
        if (values!= null) {
            for (PatientLink value: values) {
                getLinks().add(value);
            }
        }
        return this;
    }

    public Patient withLinks(Collection<PatientLink> values) {
        if (values!= null) {
            getLinks().addAll(values);
        }
        return this;
    }

    public Patient withLinks(List<PatientLink> links) {
        setLinks(links);
        return this;
    }

    public Patient withActive(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public Patient withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Patient withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Patient withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public Patient withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public Patient withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public Patient withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Patient)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Patient that = ((Patient) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            List<HumanName> lhsNames;
            lhsNames = (((this.names!= null)&&(!this.names.isEmpty()))?this.getNames():null);
            List<HumanName> rhsNames;
            rhsNames = (((that.names!= null)&&(!that.names.isEmpty()))?that.getNames():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "names", lhsNames), LocatorUtils.property(thatLocator, "names", rhsNames), lhsNames, rhsNames)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecoms;
            lhsTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            List<Contact> rhsTelecoms;
            rhsTelecoms = (((that.telecoms!= null)&&(!that.telecoms.isEmpty()))?that.getTelecoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecoms", lhsTelecoms), LocatorUtils.property(thatLocator, "telecoms", rhsTelecoms), lhsTelecoms, rhsTelecoms)) {
                return false;
            }
        }
        {
            CodeableConcept lhsGender;
            lhsGender = this.getGender();
            CodeableConcept rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            DateTime lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            DateTime rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            DateTime lhsDeceasedDateTime;
            lhsDeceasedDateTime = this.getDeceasedDateTime();
            DateTime rhsDeceasedDateTime;
            rhsDeceasedDateTime = that.getDeceasedDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deceasedDateTime", lhsDeceasedDateTime), LocatorUtils.property(thatLocator, "deceasedDateTime", rhsDeceasedDateTime), lhsDeceasedDateTime, rhsDeceasedDateTime)) {
                return false;
            }
        }
        {
            Boolean lhsDeceasedBoolean;
            lhsDeceasedBoolean = this.getDeceasedBoolean();
            Boolean rhsDeceasedBoolean;
            rhsDeceasedBoolean = that.getDeceasedBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deceasedBoolean", lhsDeceasedBoolean), LocatorUtils.property(thatLocator, "deceasedBoolean", rhsDeceasedBoolean), lhsDeceasedBoolean, rhsDeceasedBoolean)) {
                return false;
            }
        }
        {
            List<Address> lhsAddresses;
            lhsAddresses = (((this.addresses!= null)&&(!this.addresses.isEmpty()))?this.getAddresses():null);
            List<Address> rhsAddresses;
            rhsAddresses = (((that.addresses!= null)&&(!that.addresses.isEmpty()))?that.getAddresses():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addresses", lhsAddresses), LocatorUtils.property(thatLocator, "addresses", rhsAddresses), lhsAddresses, rhsAddresses)) {
                return false;
            }
        }
        {
            CodeableConcept lhsMaritalStatus;
            lhsMaritalStatus = this.getMaritalStatus();
            CodeableConcept rhsMaritalStatus;
            rhsMaritalStatus = that.getMaritalStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maritalStatus", lhsMaritalStatus), LocatorUtils.property(thatLocator, "maritalStatus", rhsMaritalStatus), lhsMaritalStatus, rhsMaritalStatus)) {
                return false;
            }
        }
        {
            Integer lhsMultipleBirthInteger;
            lhsMultipleBirthInteger = this.getMultipleBirthInteger();
            Integer rhsMultipleBirthInteger;
            rhsMultipleBirthInteger = that.getMultipleBirthInteger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multipleBirthInteger", lhsMultipleBirthInteger), LocatorUtils.property(thatLocator, "multipleBirthInteger", rhsMultipleBirthInteger), lhsMultipleBirthInteger, rhsMultipleBirthInteger)) {
                return false;
            }
        }
        {
            Boolean lhsMultipleBirthBoolean;
            lhsMultipleBirthBoolean = this.getMultipleBirthBoolean();
            Boolean rhsMultipleBirthBoolean;
            rhsMultipleBirthBoolean = that.getMultipleBirthBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multipleBirthBoolean", lhsMultipleBirthBoolean), LocatorUtils.property(thatLocator, "multipleBirthBoolean", rhsMultipleBirthBoolean), lhsMultipleBirthBoolean, rhsMultipleBirthBoolean)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPhotos;
            lhsPhotos = (((this.photos!= null)&&(!this.photos.isEmpty()))?this.getPhotos():null);
            List<Attachment> rhsPhotos;
            rhsPhotos = (((that.photos!= null)&&(!that.photos.isEmpty()))?that.getPhotos():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "photos", lhsPhotos), LocatorUtils.property(thatLocator, "photos", rhsPhotos), lhsPhotos, rhsPhotos)) {
                return false;
            }
        }
        {
            List<PatientContact> lhsContacts;
            lhsContacts = (((this.contacts!= null)&&(!this.contacts.isEmpty()))?this.getContacts():null);
            List<PatientContact> rhsContacts;
            rhsContacts = (((that.contacts!= null)&&(!that.contacts.isEmpty()))?that.getContacts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contacts", lhsContacts), LocatorUtils.property(thatLocator, "contacts", rhsContacts), lhsContacts, rhsContacts)) {
                return false;
            }
        }
        {
            PatientAnimal lhsAnimal;
            lhsAnimal = this.getAnimal();
            PatientAnimal rhsAnimal;
            rhsAnimal = that.getAnimal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "animal", lhsAnimal), LocatorUtils.property(thatLocator, "animal", rhsAnimal), lhsAnimal, rhsAnimal)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCommunications;
            lhsCommunications = (((this.communications!= null)&&(!this.communications.isEmpty()))?this.getCommunications():null);
            List<CodeableConcept> rhsCommunications;
            rhsCommunications = (((that.communications!= null)&&(!that.communications.isEmpty()))?that.getCommunications():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "communications", lhsCommunications), LocatorUtils.property(thatLocator, "communications", rhsCommunications), lhsCommunications, rhsCommunications)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsCareProviders;
            lhsCareProviders = (((this.careProviders!= null)&&(!this.careProviders.isEmpty()))?this.getCareProviders():null);
            List<ResourceReference> rhsCareProviders;
            rhsCareProviders = (((that.careProviders!= null)&&(!that.careProviders.isEmpty()))?that.getCareProviders():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "careProviders", lhsCareProviders), LocatorUtils.property(thatLocator, "careProviders", rhsCareProviders), lhsCareProviders, rhsCareProviders)) {
                return false;
            }
        }
        {
            ResourceReference lhsManagingOrganization;
            lhsManagingOrganization = this.getManagingOrganization();
            ResourceReference rhsManagingOrganization;
            rhsManagingOrganization = that.getManagingOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "managingOrganization", lhsManagingOrganization), LocatorUtils.property(thatLocator, "managingOrganization", rhsManagingOrganization), lhsManagingOrganization, rhsManagingOrganization)) {
                return false;
            }
        }
        {
            List<PatientLink> lhsLinks;
            lhsLinks = (((this.links!= null)&&(!this.links.isEmpty()))?this.getLinks():null);
            List<PatientLink> rhsLinks;
            rhsLinks = (((that.links!= null)&&(!that.links.isEmpty()))?that.getLinks():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "links", lhsLinks), LocatorUtils.property(thatLocator, "links", rhsLinks), lhsLinks, rhsLinks)) {
                return false;
            }
        }
        {
            Boolean lhsActive;
            lhsActive = this.getActive();
            Boolean rhsActive;
            rhsActive = that.getActive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "active", lhsActive), LocatorUtils.property(thatLocator, "active", rhsActive), lhsActive, rhsActive)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            List<HumanName> theNames;
            theNames = (((this.names!= null)&&(!this.names.isEmpty()))?this.getNames():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "names", theNames), currentHashCode, theNames);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecoms", theTelecoms), currentHashCode, theTelecoms);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            DateTime theDeceasedDateTime;
            theDeceasedDateTime = this.getDeceasedDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deceasedDateTime", theDeceasedDateTime), currentHashCode, theDeceasedDateTime);
        }
        {
            Boolean theDeceasedBoolean;
            theDeceasedBoolean = this.getDeceasedBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deceasedBoolean", theDeceasedBoolean), currentHashCode, theDeceasedBoolean);
        }
        {
            List<Address> theAddresses;
            theAddresses = (((this.addresses!= null)&&(!this.addresses.isEmpty()))?this.getAddresses():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addresses", theAddresses), currentHashCode, theAddresses);
        }
        {
            CodeableConcept theMaritalStatus;
            theMaritalStatus = this.getMaritalStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maritalStatus", theMaritalStatus), currentHashCode, theMaritalStatus);
        }
        {
            Integer theMultipleBirthInteger;
            theMultipleBirthInteger = this.getMultipleBirthInteger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multipleBirthInteger", theMultipleBirthInteger), currentHashCode, theMultipleBirthInteger);
        }
        {
            Boolean theMultipleBirthBoolean;
            theMultipleBirthBoolean = this.getMultipleBirthBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multipleBirthBoolean", theMultipleBirthBoolean), currentHashCode, theMultipleBirthBoolean);
        }
        {
            List<Attachment> thePhotos;
            thePhotos = (((this.photos!= null)&&(!this.photos.isEmpty()))?this.getPhotos():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "photos", thePhotos), currentHashCode, thePhotos);
        }
        {
            List<PatientContact> theContacts;
            theContacts = (((this.contacts!= null)&&(!this.contacts.isEmpty()))?this.getContacts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contacts", theContacts), currentHashCode, theContacts);
        }
        {
            PatientAnimal theAnimal;
            theAnimal = this.getAnimal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "animal", theAnimal), currentHashCode, theAnimal);
        }
        {
            List<CodeableConcept> theCommunications;
            theCommunications = (((this.communications!= null)&&(!this.communications.isEmpty()))?this.getCommunications():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "communications", theCommunications), currentHashCode, theCommunications);
        }
        {
            List<ResourceReference> theCareProviders;
            theCareProviders = (((this.careProviders!= null)&&(!this.careProviders.isEmpty()))?this.getCareProviders():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "careProviders", theCareProviders), currentHashCode, theCareProviders);
        }
        {
            ResourceReference theManagingOrganization;
            theManagingOrganization = this.getManagingOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "managingOrganization", theManagingOrganization), currentHashCode, theManagingOrganization);
        }
        {
            List<PatientLink> theLinks;
            theLinks = (((this.links!= null)&&(!this.links.isEmpty()))?this.getLinks():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "links", theLinks), currentHashCode, theLinks);
        }
        {
            Boolean theActive;
            theActive = this.getActive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "active", theActive), currentHashCode, theActive);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
