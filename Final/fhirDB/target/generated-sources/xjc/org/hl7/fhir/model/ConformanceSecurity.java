//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
 * 
 * <p>Java class for Conformance.Security complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance.Security">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="cors" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="service" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="certificate" type="{http://hl7.org/fhir}Conformance.Certificate" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Security", propOrder = {
    "cors",
    "services",
    "description",
    "certificates"
})
@Entity(name = "ConformanceSecurity")
@Table(name = "CONFORMANCESECURITY")
public class ConformanceSecurity
    extends BackboneElement
    implements Serializable, Equals, HashCode
{

    protected Boolean cors;
    @XmlElement(name = "service")
    protected List<CodeableConcept> services;
    protected org.hl7.fhir.model.String description;
    @XmlElement(name = "certificate")
    protected List<ConformanceCertificate> certificates;

    /**
     * Gets the value of the cors property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CORS_CONFORMANCESECURITY_HJID")
    public Boolean getCors() {
        return cors;
    }

    /**
     * Sets the value of the cors property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCors(Boolean value) {
        this.cors = value;
    }

    /**
     * Gets the value of the services property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the services property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getServices().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICES_CONFORMANCESECURITY_0")
    public List<CodeableConcept> getServices() {
        if (services == null) {
            services = new ArrayList<CodeableConcept>();
        }
        return this.services;
    }

    /**
     * 
     * 
     */
    public void setServices(List<CodeableConcept> services) {
        this.services = services;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_CONFORMANCESECUR_0")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the certificates property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the certificates property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCertificates().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceCertificate }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceCertificate.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CERTIFICATES_CONFORMANCESECU_0")
    public List<ConformanceCertificate> getCertificates() {
        if (certificates == null) {
            certificates = new ArrayList<ConformanceCertificate>();
        }
        return this.certificates;
    }

    /**
     * 
     * 
     */
    public void setCertificates(List<ConformanceCertificate> certificates) {
        this.certificates = certificates;
    }

    public ConformanceSecurity withCors(Boolean value) {
        setCors(value);
        return this;
    }

    public ConformanceSecurity withServices(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getServices().add(value);
            }
        }
        return this;
    }

    public ConformanceSecurity withServices(Collection<CodeableConcept> values) {
        if (values!= null) {
            getServices().addAll(values);
        }
        return this;
    }

    public ConformanceSecurity withServices(List<CodeableConcept> services) {
        setServices(services);
        return this;
    }

    public ConformanceSecurity withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public ConformanceSecurity withCertificates(ConformanceCertificate... values) {
        if (values!= null) {
            for (ConformanceCertificate value: values) {
                getCertificates().add(value);
            }
        }
        return this;
    }

    public ConformanceSecurity withCertificates(Collection<ConformanceCertificate> values) {
        if (values!= null) {
            getCertificates().addAll(values);
        }
        return this;
    }

    public ConformanceSecurity withCertificates(List<ConformanceCertificate> certificates) {
        setCertificates(certificates);
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConformanceSecurity withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSecurity withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSecurity withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConformanceSecurity withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceSecurity)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceSecurity that = ((ConformanceSecurity) object);
        {
            Boolean lhsCors;
            lhsCors = this.getCors();
            Boolean rhsCors;
            rhsCors = that.getCors();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cors", lhsCors), LocatorUtils.property(thatLocator, "cors", rhsCors), lhsCors, rhsCors)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsServices;
            lhsServices = (((this.services!= null)&&(!this.services.isEmpty()))?this.getServices():null);
            List<CodeableConcept> rhsServices;
            rhsServices = (((that.services!= null)&&(!that.services.isEmpty()))?that.getServices():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "services", lhsServices), LocatorUtils.property(thatLocator, "services", rhsServices), lhsServices, rhsServices)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<ConformanceCertificate> lhsCertificates;
            lhsCertificates = (((this.certificates!= null)&&(!this.certificates.isEmpty()))?this.getCertificates():null);
            List<ConformanceCertificate> rhsCertificates;
            rhsCertificates = (((that.certificates!= null)&&(!that.certificates.isEmpty()))?that.getCertificates():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "certificates", lhsCertificates), LocatorUtils.property(thatLocator, "certificates", rhsCertificates), lhsCertificates, rhsCertificates)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Boolean theCors;
            theCors = this.getCors();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cors", theCors), currentHashCode, theCors);
        }
        {
            List<CodeableConcept> theServices;
            theServices = (((this.services!= null)&&(!this.services.isEmpty()))?this.getServices():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "services", theServices), currentHashCode, theServices);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<ConformanceCertificate> theCertificates;
            theCertificates = (((this.certificates!= null)&&(!this.certificates.isEmpty()))?this.getCertificates():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certificates", theCertificates), currentHashCode, theCertificates);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
