//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.09 at 01:15:06 AM MST 
//


package org.hl7.fhir.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 * 
 * <p>Java class for CodeableConcept complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CodeableConcept">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Element">
 *       &lt;sequence>
 *         &lt;element name="coding" type="{http://hl7.org/fhir}Coding" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="text" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CodeableConcept", propOrder = {
    "codings",
    "text"
})
@Entity(name = "CodeableConcept")
@Table(name = "CODEABLECONCEPT")
public class CodeableConcept
    extends Element
    implements Serializable, Equals, HashCode
{

    @XmlElement(name = "coding")
    protected List<Coding> codings;
    protected org.hl7.fhir.model.String text;

    /**
     * Gets the value of the codings property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codings property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodings().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Coding }
     * 
     * 
     */
    @OneToMany(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODINGS_CODEABLECONCEPT_HJID")
    public List<Coding> getCodings() {
        if (codings == null) {
            codings = new ArrayList<Coding>();
        }
        return this.codings;
    }

    /**
     * 
     * 
     */
    public void setCodings(List<Coding> codings) {
        this.codings = codings;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_CODEABLECONCEPT_HJID")
    public org.hl7.fhir.model.String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.model.String }
     *     
     */
    public void setText(org.hl7.fhir.model.String value) {
        this.text = value;
    }

    public CodeableConcept withCodings(Coding... values) {
        if (values!= null) {
            for (Coding value: values) {
                getCodings().add(value);
            }
        }
        return this;
    }

    public CodeableConcept withCodings(Collection<Coding> values) {
        if (values!= null) {
            getCodings().addAll(values);
        }
        return this;
    }

    public CodeableConcept withCodings(List<Coding> codings) {
        setCodings(codings);
        return this;
    }

    public CodeableConcept withText(org.hl7.fhir.model.String value) {
        setText(value);
        return this;
    }

    @Override
    public CodeableConcept withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CodeableConcept withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CodeableConcept withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public CodeableConcept withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CodeableConcept)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CodeableConcept that = ((CodeableConcept) object);
        {
            List<Coding> lhsCodings;
            lhsCodings = (((this.codings!= null)&&(!this.codings.isEmpty()))?this.getCodings():null);
            List<Coding> rhsCodings;
            rhsCodings = (((that.codings!= null)&&(!that.codings.isEmpty()))?that.getCodings():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codings", lhsCodings), LocatorUtils.property(thatLocator, "codings", rhsCodings), lhsCodings, rhsCodings)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsText;
            lhsText = this.getText();
            org.hl7.fhir.model.String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Coding> theCodings;
            theCodings = (((this.codings!= null)&&(!this.codings.isEmpty()))?this.getCodings():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codings", theCodings), currentHashCode, theCodings);
        }
        {
            org.hl7.fhir.model.String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
